/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEvent, merge, Observable } from 'rxjs';
import { map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { stopPropagation } from './scrollbar/common';
var ScrollViewport = /** @class */ (function () {
    function ScrollViewport(viewPort, document) {
        this.viewPort = viewPort;
        this.document = document;
        this.nativeElement = viewPort.nativeElement;
    }
    Object.defineProperty(ScrollViewport.prototype, "clientHeight", {
        // Get viewport size, clientHeight or clientWidth
        get: 
        // Get viewport size, clientHeight or clientWidth
        /**
         * @return {?}
         */
        function () {
            return this.nativeElement.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "clientWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nativeElement.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollHeight", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nativeElement.scrollHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nativeElement.scrollWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollTop", {
        // Get viewport scroll offset, scrollTop or scrollLeft
        get: 
        // Get viewport scroll offset, scrollTop or scrollLeft
        /**
         * @return {?}
         */
        function () {
            return this.nativeElement.scrollTop;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollLeft", {
        get: /**
         * @return {?}
         */
        function () {
            return this.nativeElement.scrollLeft;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollMaxX", {
        // Get the available scrollable size
        get: 
        // Get the available scrollable size
        /**
         * @return {?}
         */
        function () {
            return this.scrollWidth - this.clientWidth;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "scrollMaxY", {
        get: /**
         * @return {?}
         */
        function () {
            return this.scrollHeight - this.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ScrollViewport.prototype, "contentHeight", {
        get: /**
         * @return {?}
         */
        function () {
            return this.contentWrapperElement.clientHeight;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     */
    /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     * @param {?} destroyed
     * @return {?}
     */
    ScrollViewport.prototype.activatePointerEvents = /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     * @param {?} destroyed
     * @return {?}
     */
    function (destroyed) {
        var _this = this;
        this.hovered = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            // Stream that emits when pointer is moved over the viewport (used to set the hovered state)
            /** @type {?} */
            var mouseMove = fromEvent(_this.nativeElement, 'mousemove', { passive: true }).pipe(stopPropagation());
            // Stream that emits when pointer leaves the viewport (used to remove the hovered state)
            /** @type {?} */
            var mouseLeave = fromEvent(_this.nativeElement, 'mouseleave').pipe(map((/**
             * @return {?}
             */
            function () { return false; })));
            merge(mouseMove, mouseLeave).pipe(tap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return observer.next(e); })), takeUntil(destroyed)).subscribe();
        }));
        this.clicked = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var mouseDown = fromEvent(_this.nativeElement, 'mousedown', { passive: true }).pipe(tap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return observer.next(e); })));
            /** @type {?} */
            var mouseUp = fromEvent(_this.nativeElement, 'mouseup', { passive: true }).pipe(tap((/**
             * @return {?}
             */
            function () { return observer.next(false); })));
            mouseDown.pipe(switchMap((/**
             * @return {?}
             */
            function () { return mouseUp; })), takeUntil(destroyed)).subscribe();
        }));
    };
    /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     */
    /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     * @return {?}
     */
    ScrollViewport.prototype.setAsWrapper = /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     * @return {?}
     */
    function () {
        // In this case the default viewport and the default content wrapper will act as a mask
        this.nativeElement.className = 'ng-native-scrollbar-hider ng-scroll-layer';
        if (this.nativeElement.firstElementChild) {
            this.nativeElement.firstElementChild.className = 'ng-scroll-layer';
        }
    };
    /**
     * Set this directive as  the viewport, called when no custom viewport is used
     */
    /**
     * Set this directive as  the viewport, called when no custom viewport is used
     * @param {?} customClassName
     * @return {?}
     */
    ScrollViewport.prototype.setAsViewport = /**
     * Set this directive as  the viewport, called when no custom viewport is used
     * @param {?} customClassName
     * @return {?}
     */
    function (customClassName) {
        this.nativeElement.className = "ng-native-scrollbar-hider ng-scroll-viewport " + customClassName;
        // Check if the custom viewport has only one child and set it as the content wrapper
        if (this.nativeElement.firstElementChild) {
            this.contentWrapperElement = (/** @type {?} */ (this.nativeElement.firstElementChild));
            this.contentWrapperElement.classList.add('ng-scroll-content');
        }
    };
    /**
     * Scroll viewport vertically
     */
    /**
     * Scroll viewport vertically
     * @param {?} value
     * @return {?}
     */
    ScrollViewport.prototype.scrollYTo = /**
     * Scroll viewport vertically
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.nativeElement.scrollTop = value;
    };
    /**
     * Scroll viewport horizontally
     */
    /**
     * Scroll viewport horizontally
     * @param {?} value
     * @return {?}
     */
    ScrollViewport.prototype.scrollXTo = /**
     * Scroll viewport horizontally
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.nativeElement.scrollLeft = value;
    };
    ScrollViewport.decorators = [
        { type: Directive, args: [{
                    selector: '[scrollViewport]'
                },] }
    ];
    /** @nocollapse */
    ScrollViewport.ctorParameters = function () { return [
        { type: ElementRef },
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    return ScrollViewport;
}());
export { ScrollViewport };
if (false) {
    /** @type {?} */
    ScrollViewport.prototype.nativeElement;
    /** @type {?} */
    ScrollViewport.prototype.contentWrapperElement;
    /** @type {?} */
    ScrollViewport.prototype.hovered;
    /** @type {?} */
    ScrollViewport.prototype.clicked;
    /** @type {?} */
    ScrollViewport.prototype.viewPort;
    /**
     * @type {?}
     * @private
     */
    ScrollViewport.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,