/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { EMPTY, fromEvent, merge, of } from 'rxjs';
import { map, pluck, switchMap, tap } from 'rxjs/operators';
import { preventSelection, enableSelection, stopPropagation } from '../common';
/**
 * @abstract
 */
var /**
 * @abstract
 */
TrackAdapter = /** @class */ (function () {
    function TrackAdapter(cmp, trackElement, document) {
        this.cmp = cmp;
        this.trackElement = trackElement;
        this.document = document;
    }
    Object.defineProperty(TrackAdapter.prototype, "clicked", {
        // Stream that emits when the track element is clicked
        get: 
        // Stream that emits when the track element is clicked
        /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var mouseDown = fromEvent(this.trackElement, 'mousedown', { passive: true }).pipe(stopPropagation(), preventSelection(this.document));
            /** @type {?} */
            var mouseup = fromEvent(this.document, 'mouseup', { passive: true }).pipe(stopPropagation(), enableSelection(this.document), switchMap((/**
             * @return {?}
             */
            function () { return EMPTY; })));
            return merge(mouseDown, mouseup);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrackAdapter.prototype, "hovered", {
        // Stream that emits when the track element is hovered
        get: 
        // Stream that emits when the track element is hovered
        /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var mouseEnter = fromEvent(this.trackElement, 'mouseenter', { passive: true }).pipe(stopPropagation(), map((/**
             * @return {?}
             */
            function () { return true; })));
            /** @type {?} */
            var mouseLeave = fromEvent(this.trackElement, 'mouseleave', { passive: true }).pipe(stopPropagation(), map((/**
             * @return {?}
             */
            function () { return false; })));
            return merge(mouseEnter, mouseLeave);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(TrackAdapter.prototype, "clientRect", {
        // Get track client rect
        get: 
        // Get track client rect
        /**
         * @return {?}
         */
        function () {
            return this.trackElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Stream that emits when scrollbar track is clicked
     */
    /**
     * Stream that emits when scrollbar track is clicked
     * @param {?} e
     * @param {?} thumbSize
     * @param {?} scrollSize
     * @return {?}
     */
    TrackAdapter.prototype.onTrackClicked = /**
     * Stream that emits when scrollbar track is clicked
     * @param {?} e
     * @param {?} thumbSize
     * @param {?} scrollSize
     * @return {?}
     */
    function (e, thumbSize, scrollSize) {
        var _this = this;
        return of(e).pipe(pluck(this.pageProperty), 
        // Calculate scrollTo position
        map((/**
         * @param {?} pageOffset
         * @return {?}
         */
        function (pageOffset) {
            /** @type {?} */
            var clickOffset = pageOffset - _this.offset;
            /** @type {?} */
            var offset = clickOffset - (thumbSize / 2);
            /** @type {?} */
            var ratio = offset / _this.size;
            return ratio * scrollSize;
        })), 
        // Smooth scroll to position
        tap((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            _this.cmp.scrollTo(tslib_1.__assign({}, _this.mapToScrollToOption(value), { duration: coerceNumberProperty(_this.cmp.trackClickScrollDuration) }));
        })));
    };
    return TrackAdapter;
}());
/**
 * @abstract
 */
export { TrackAdapter };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    TrackAdapter.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    TrackAdapter.prototype.trackElement;
    /**
     * @type {?}
     * @protected
     */
    TrackAdapter.prototype.document;
    /**
     * @abstract
     * @return {?}
     */
    TrackAdapter.prototype.pageProperty = function () { };
    /**
     * @abstract
     * @return {?}
     */
    TrackAdapter.prototype.size = function () { };
    /**
     * @abstract
     * @return {?}
     */
    TrackAdapter.prototype.offset = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    TrackAdapter.prototype.mapToScrollToOption = function (value) { };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3Njcm9sbGJhci90cmFjay90cmFjay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdELE9BQU8sRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBYyxFQUFFLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0QsT0FBTyxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLE1BQU0sV0FBVyxDQUFDOzs7O0FBRy9FOzs7O0lBMkNFLHNCQUFnQyxHQUFnQixFQUNoQixZQUF5QixFQUN6QixRQUFhO1FBRmIsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUNoQixpQkFBWSxHQUFaLFlBQVksQ0FBYTtRQUN6QixhQUFRLEdBQVIsUUFBUSxDQUFLO0lBQzdDLENBQUM7SUEzQ0Qsc0JBQUksaUNBQU87UUFEWCxzREFBc0Q7Ozs7OztRQUN0RDs7Z0JBQ1EsU0FBUyxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDakYsZUFBZSxFQUFFLEVBQ2pCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDaEM7O2dCQUNLLE9BQU8sR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3pFLGVBQWUsRUFBRSxFQUNqQixlQUFlLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUM5QixTQUFTOzs7WUFBQyxjQUFNLE9BQUEsS0FBSyxFQUFMLENBQUssRUFBQyxDQUN2QjtZQUNELE9BQU8sS0FBSyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztRQUNuQyxDQUFDOzs7T0FBQTtJQUdELHNCQUFJLGlDQUFPO1FBRFgsc0RBQXNEOzs7Ozs7UUFDdEQ7O2dCQUNRLFVBQVUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxZQUFZLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ25GLGVBQWUsRUFBRSxFQUNqQixHQUFHOzs7WUFBQyxjQUFNLE9BQUEsSUFBSSxFQUFKLENBQUksRUFBQyxDQUNoQjs7Z0JBQ0ssVUFBVSxHQUFHLFNBQVMsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLFlBQVksRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDbkYsZUFBZSxFQUFFLEVBQ2pCLEdBQUc7OztZQUFDLGNBQU0sT0FBQSxLQUFLLEVBQUwsQ0FBSyxFQUFDLENBQ2pCO1lBQ0QsT0FBTyxLQUFLLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQyxDQUFDO1FBQ3ZDLENBQUM7OztPQUFBO0lBWUQsc0JBQUksb0NBQVU7UUFEZCx3QkFBd0I7Ozs7OztRQUN4QjtZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQ25ELENBQUM7OztPQUFBO0lBT0Q7O09BRUc7Ozs7Ozs7O0lBQ0gscUNBQWM7Ozs7Ozs7SUFBZCxVQUFlLENBQU0sRUFBRSxTQUFpQixFQUFFLFVBQWtCO1FBQTVELGlCQWtCQztRQWpCQyxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDeEIsOEJBQThCO1FBQzlCLEdBQUc7Ozs7UUFBQyxVQUFDLFVBQWtCOztnQkFDZixXQUFXLEdBQUcsVUFBVSxHQUFHLEtBQUksQ0FBQyxNQUFNOztnQkFDdEMsTUFBTSxHQUFHLFdBQVcsR0FBRyxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7O2dCQUN0QyxLQUFLLEdBQUcsTUFBTSxHQUFHLEtBQUksQ0FBQyxJQUFJO1lBQ2hDLE9BQU8sS0FBSyxHQUFHLFVBQVUsQ0FBQztRQUM1QixDQUFDLEVBQUM7UUFDRiw0QkFBNEI7UUFDNUIsR0FBRzs7OztRQUFDLFVBQUMsS0FBYTtZQUNoQixLQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsc0JBQ1osS0FBSSxDQUFDLG1CQUFtQixDQUFDLEtBQUssQ0FBQyxJQUNsQyxRQUFRLEVBQUUsb0JBQW9CLENBQUMsS0FBSSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQyxJQUNqRSxDQUFDO1FBQ0wsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7SUFHSCxtQkFBQztBQUFELENBQUMsQUF4RUQsSUF3RUM7Ozs7Ozs7Ozs7SUE3QnVCLDJCQUEwQjs7Ozs7SUFDMUIsb0NBQW1DOzs7OztJQUNuQyxnQ0FBdUI7Ozs7O0lBZjdDLHNEQUFvQzs7Ozs7SUFHcEMsOENBQTRCOzs7OztJQUc1QixnREFBOEI7Ozs7Ozs7SUFtQzlCLGtFQUF1RSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvZXJjZU51bWJlclByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcclxuaW1wb3J0IHsgRU1QVFksIGZyb21FdmVudCwgbWVyZ2UsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgcGx1Y2ssIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBwcmV2ZW50U2VsZWN0aW9uLCBlbmFibGVTZWxlY3Rpb24sIHN0b3BQcm9wYWdhdGlvbiB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmltcG9ydCB7IE5nU2Nyb2xsYmFyIH0gZnJvbSAnLi4vLi4vbmctc2Nyb2xsYmFyJztcclxuXHJcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBUcmFja0FkYXB0ZXIge1xyXG5cclxuICAvLyBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRoZSB0cmFjayBlbGVtZW50IGlzIGNsaWNrZWRcclxuICBnZXQgY2xpY2tlZCgpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG4gICAgY29uc3QgbW91c2VEb3duID0gZnJvbUV2ZW50KHRoaXMudHJhY2tFbGVtZW50LCAnbW91c2Vkb3duJywgeyBwYXNzaXZlOiB0cnVlIH0pLnBpcGUoXHJcbiAgICAgIHN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgICBwcmV2ZW50U2VsZWN0aW9uKHRoaXMuZG9jdW1lbnQpXHJcbiAgICApO1xyXG4gICAgY29uc3QgbW91c2V1cCA9IGZyb21FdmVudCh0aGlzLmRvY3VtZW50LCAnbW91c2V1cCcsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxyXG4gICAgICBzdG9wUHJvcGFnYXRpb24oKSxcclxuICAgICAgZW5hYmxlU2VsZWN0aW9uKHRoaXMuZG9jdW1lbnQpLFxyXG4gICAgICBzd2l0Y2hNYXAoKCkgPT4gRU1QVFkpXHJcbiAgICApO1xyXG4gICAgcmV0dXJuIG1lcmdlKG1vdXNlRG93biwgbW91c2V1cCk7XHJcbiAgfVxyXG5cclxuICAvLyBTdHJlYW0gdGhhdCBlbWl0cyB3aGVuIHRoZSB0cmFjayBlbGVtZW50IGlzIGhvdmVyZWRcclxuICBnZXQgaG92ZXJlZCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcclxuICAgIGNvbnN0IG1vdXNlRW50ZXIgPSBmcm9tRXZlbnQodGhpcy50cmFja0VsZW1lbnQsICdtb3VzZWVudGVyJywgeyBwYXNzaXZlOiB0cnVlIH0pLnBpcGUoXHJcbiAgICAgIHN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgICBtYXAoKCkgPT4gdHJ1ZSlcclxuICAgICk7XHJcbiAgICBjb25zdCBtb3VzZUxlYXZlID0gZnJvbUV2ZW50KHRoaXMudHJhY2tFbGVtZW50LCAnbW91c2VsZWF2ZScsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxyXG4gICAgICBzdG9wUHJvcGFnYXRpb24oKSxcclxuICAgICAgbWFwKCgpID0+IGZhbHNlKVxyXG4gICAgKTtcclxuICAgIHJldHVybiBtZXJnZShtb3VzZUVudGVyLCBtb3VzZUxlYXZlKTtcclxuICB9XHJcblxyXG4gIC8vIFJldHVybnMgZWl0aGVyICdwYWdlWCcgb3IgJ3BhZ2VZJyBhY2NvcmRpbmcgdG8gc2Nyb2xsYmFyIGF4aXNcclxuICBhYnN0cmFjdCBnZXQgcGFnZVByb3BlcnR5KCk6IHN0cmluZztcclxuXHJcbiAgLy8gUmV0dXJucyB0aGUgdHJhY2sgc2l6ZSwgY2xpZW50SGVpZ2h0IG9yIGNsaWVudFdpZHRoXHJcbiAgYWJzdHJhY3QgZ2V0IHNpemUoKTogbnVtYmVyO1xyXG5cclxuICAvLyBSZXR1cm5zIHRoZSBzdGFydCBvZmZzZXQgZWl0aGVyICdjbGllbnRSZWN0LnRvcCcgb3IgJ2NsaWVudFJlY3QubGVmdCdcclxuICBhYnN0cmFjdCBnZXQgb2Zmc2V0KCk6IG51bWJlcjtcclxuXHJcbiAgLy8gR2V0IHRyYWNrIGNsaWVudCByZWN0XHJcbiAgZ2V0IGNsaWVudFJlY3QoKTogQ2xpZW50UmVjdCB7XHJcbiAgICByZXR1cm4gdGhpcy50cmFja0VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIGNtcDogTmdTY3JvbGxiYXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb3RlY3RlZCB0cmFja0VsZW1lbnQ6IEhUTUxFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgZG9jdW1lbnQ6IGFueSkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBzY3JvbGxiYXIgdHJhY2sgaXMgY2xpY2tlZFxyXG4gICAqL1xyXG4gIG9uVHJhY2tDbGlja2VkKGU6IGFueSwgdGh1bWJTaXplOiBudW1iZXIsIHNjcm9sbFNpemU6IG51bWJlcik6IE9ic2VydmFibGU8YW55PiB7XHJcbiAgICByZXR1cm4gb2YoZSkucGlwZShcclxuICAgICAgcGx1Y2sodGhpcy5wYWdlUHJvcGVydHkpLFxyXG4gICAgICAvLyBDYWxjdWxhdGUgc2Nyb2xsVG8gcG9zaXRpb25cclxuICAgICAgbWFwKChwYWdlT2Zmc2V0OiBudW1iZXIpID0+IHtcclxuICAgICAgICBjb25zdCBjbGlja09mZnNldCA9IHBhZ2VPZmZzZXQgLSB0aGlzLm9mZnNldDtcclxuICAgICAgICBjb25zdCBvZmZzZXQgPSBjbGlja09mZnNldCAtICh0aHVtYlNpemUgLyAyKTtcclxuICAgICAgICBjb25zdCByYXRpbyA9IG9mZnNldCAvIHRoaXMuc2l6ZTtcclxuICAgICAgICByZXR1cm4gcmF0aW8gKiBzY3JvbGxTaXplO1xyXG4gICAgICB9KSxcclxuICAgICAgLy8gU21vb3RoIHNjcm9sbCB0byBwb3NpdGlvblxyXG4gICAgICB0YXAoKHZhbHVlOiBudW1iZXIpID0+IHtcclxuICAgICAgICB0aGlzLmNtcC5zY3JvbGxUbyh7XHJcbiAgICAgICAgICAuLi50aGlzLm1hcFRvU2Nyb2xsVG9PcHRpb24odmFsdWUpLFxyXG4gICAgICAgICAgZHVyYXRpb246IGNvZXJjZU51bWJlclByb3BlcnR5KHRoaXMuY21wLnRyYWNrQ2xpY2tTY3JvbGxEdXJhdGlvbilcclxuICAgICAgICB9KTtcclxuICAgICAgfSlcclxuICAgICk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgYWJzdHJhY3QgbWFwVG9TY3JvbGxUb09wdGlvbih2YWx1ZTogbnVtYmVyKTogU2Nyb2xsVG9PcHRpb25zO1xyXG59XHJcbiJdfQ==