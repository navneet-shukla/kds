/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { asyncScheduler, EMPTY, merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { isWithinBounds } from './common';
/**
 * @abstract
 */
var /**
 * @abstract
 */
Scrollbar = /** @class */ (function () {
    function Scrollbar(cmp, platform, document, zone) {
        this.cmp = cmp;
        this.platform = platform;
        this.document = document;
        this.zone = zone;
        // Stream that emits to unsubscribe from all streams
        this.destroyed = new Subject();
    }
    /**
     * Activate scrollbar pointer events
     */
    /**
     * Activate scrollbar pointer events
     * @private
     * @return {?}
     */
    Scrollbar.prototype.activatePointerEvents = /**
     * Activate scrollbar pointer events
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        // Stream that emits when scrollbar thumb is dragged
        /** @type {?} */
        var thumbDragEvent = EMPTY;
        // Stream that emits when scrollbar track is clicked
        /** @type {?} */
        var trackClickEvent = EMPTY;
        // Stream that emits when scrollbar track is hovered
        /** @type {?} */
        var trackHoveredEvent = EMPTY;
        // Set the method used for the pointer events option
        if (this.cmp.pointerEventsMethod === 'viewport') {
            // Pointer events using the viewport
            this.viewportTrackClicked = new Subject();
            this.viewportThumbClicked = new Subject();
            // Activate the pointer events of the viewport directive
            this.cmp.viewport.activatePointerEvents(this.destroyed);
            // Set streams
            thumbDragEvent = this.viewportThumbClicked;
            trackClickEvent = this.viewportTrackClicked;
            trackHoveredEvent = this.cmp.viewport.hovered.pipe(
            // Check if track is hovered
            map((/**
             * @param {?} e
             * @return {?}
             */
            function (e) { return isWithinBounds(e, _this.track.clientRect); })), distinctUntilChanged(), 
            // Enable / disable text selection
            tap((/**
             * @param {?} hovered
             * @return {?}
             */
            function (hovered) { return _this.document.onselectstart = hovered ? (/**
             * @return {?}
             */
            function () { return false; }) : null; })));
            this.cmp.viewport.clicked.pipe(tap((/**
             * @param {?} e
             * @return {?}
             */
            function (e) {
                if (e) {
                    if (isWithinBounds(e, _this.thumb.clientRect)) {
                        _this.viewportThumbClicked.next(e);
                    }
                    else if (isWithinBounds(e, _this.track.clientRect)) {
                        _this.cmp.setClicked(true);
                        _this.viewportTrackClicked.next(e);
                    }
                }
                else {
                    _this.cmp.setClicked(false);
                }
            })), takeUntil(this.destroyed)).subscribe();
        }
        else {
            // Pointer events method is using 'scrollbar'
            thumbDragEvent = this.thumb.clicked;
            trackClickEvent = this.track.clicked;
            trackHoveredEvent = this.track.hovered;
        }
        return merge(
        // Activate scrollbar hovered event
        trackHoveredEvent.pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.setHovered(e); }))), 
        // Activate scrollbar thumb drag event
        thumbDragEvent.pipe(switchMap((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.thumb.dragged(e); }))), 
        // Activate scrollbar track click event
        trackClickEvent.pipe(switchMap((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return _this.track.onTrackClicked(e, _this.thumb.size, _this.viewportScrollSize); }))));
    };
    /**
     * @return {?}
     */
    Scrollbar.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        function () {
            // Activate pointer events on Desktop only
            if (!(_this.platform.IOS || _this.platform.ANDROID) && !_this.cmp.pointerEventsDisabled) {
                _this.activatePointerEvents().pipe(takeUntil(_this.destroyed)).subscribe();
            }
            // Stream that emits when host component is updated
            /** @type {?} */
            var updated = _this.cmp.updated.pipe(tap((/**
             * @return {?}
             */
            function () { return _this.onUpdated(); })));
            // Update scrollbar thumb when viewport is scrolled and when scrollbar component is updated
            merge(_this.cmp.scrolled, updated).pipe(tap((/**
             * @return {?}
             */
            function () { return _this.thumb.update(); })), takeUntil(_this.destroyed)).subscribe();
            // Initialize scrollbar
            asyncScheduler.schedule((/**
             * @return {?}
             */
            function () { return _this.thumb.update(); }), 100);
        }));
    };
    /**
     * @return {?}
     */
    Scrollbar.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed.next();
        this.destroyed.complete();
        // Clean up viewport streams if used
        if (this.viewportThumbClicked && this.viewportTrackClicked) {
            this.viewportTrackClicked.complete();
            this.viewportThumbClicked.complete();
        }
    };
    return Scrollbar;
}());
/**
 * @abstract
 */
export { Scrollbar };
if (false) {
    /** @type {?} */
    Scrollbar.prototype.thumb;
    /** @type {?} */
    Scrollbar.prototype.track;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.destroyed;
    /**
     * Viewport pointer events
     * The following streams are only activated when (pointerEventsMethod === 'viewport')
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.viewportTrackClicked;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.viewportThumbClicked;
    /** @type {?} */
    Scrollbar.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.platform;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.zone;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    Scrollbar.prototype.viewportScrollSize = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    Scrollbar.prototype.setHovered = function (value) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    Scrollbar.prototype.onUpdated = function () { };
}
//# sourceMappingURL=data:application/json;base64,