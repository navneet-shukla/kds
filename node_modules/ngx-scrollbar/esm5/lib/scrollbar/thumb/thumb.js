/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output } from '@angular/core';
import { animationFrameScheduler, of, fromEvent, Subject } from 'rxjs';
import { distinctUntilChanged, map, mergeMap, pluck, takeUntil, tap } from 'rxjs/operators';
import { enableSelection, preventSelection, stopPropagation } from '../common';
import { TrackAdapter } from '../track/track';
/**
 * @abstract
 */
var ThumbAdapter = /** @class */ (function () {
    function ThumbAdapter(cmp, thumbElement, document) {
        this.cmp = cmp;
        this.thumbElement = thumbElement;
        this.document = document;
        // Stream that emits dragging state
        this._dragging = new Subject();
        this.dragging = this._dragging.pipe(distinctUntilChanged());
    }
    Object.defineProperty(ThumbAdapter.prototype, "trackMax", {
        get: /**
         * @return {?}
         */
        function () {
            return this.track.size - this.size;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbAdapter.prototype, "clientRect", {
        // Get thumb client rect
        get: 
        // Get thumb client rect
        /**
         * @return {?}
         */
        function () {
            return this.thumbElement.getBoundingClientRect();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ThumbAdapter.prototype, "clicked", {
        // Stream that emits when scrollbar thumb is clicked
        get: 
        // Stream that emits when scrollbar thumb is clicked
        /**
         * @return {?}
         */
        function () {
            return fromEvent(this.thumbElement, 'mousedown', { passive: true }).pipe(stopPropagation());
        },
        enumerable: true,
        configurable: true
    });
    // Calculate and update thumb position and size
    // Calculate and update thumb position and size
    /**
     * @return {?}
     */
    ThumbAdapter.prototype.update = 
    // Calculate and update thumb position and size
    /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var size = calculateThumbSize(this.track.size, this.viewportScrollSize, (/** @type {?} */ (this.cmp.minThumbSize)));
        /** @type {?} */
        var position = calculateThumbPosition(this.viewportScrollOffset, this.viewportScrollMax, this.trackMax);
        animationFrameScheduler.schedule((/**
         * @return {?}
         */
        function () { return _this.updateStyles(_this.handleDirection(position, _this.trackMax), size); }));
    };
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     */
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     * @param {?} event
     * @return {?}
     */
    ThumbAdapter.prototype.dragged = /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        /** @type {?} */
        var trackMaxStart;
        /** @type {?} */
        var scrollMaxStart;
        /** @type {?} */
        var dragStart = of(event).pipe(preventSelection(this.document), tap((/**
         * @return {?}
         */
        function () {
            // Capture scrollMax and trackMax once
            trackMaxStart = _this.trackMax;
            scrollMaxStart = _this.viewportScrollMax;
            _this.setDragging(true);
        })));
        /** @type {?} */
        var dragging = fromEvent(this.document, 'mousemove', { capture: true, passive: true }).pipe(stopPropagation());
        /** @type {?} */
        var dragEnd = fromEvent(this.document, 'mouseup', { capture: true }).pipe(stopPropagation(), enableSelection(this.document), tap((/**
         * @return {?}
         */
        function () { return _this.setDragging(false); })));
        return dragStart.pipe(pluck(this.pageProperty), map((/**
         * @param {?} pageOffset
         * @return {?}
         */
        function (pageOffset) { return pageOffset - _this.dragStartOffset; })), mergeMap((/**
         * @param {?} mouseDownOffset
         * @return {?}
         */
        function (mouseDownOffset) { return dragging.pipe(pluck(_this.clientProperty), 
        // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).
        map((/**
         * @param {?} mouseOffset
         * @return {?}
         */
        function (mouseOffset) { return mouseOffset - _this.track.offset; })), map((/**
         * @param {?} offset
         * @return {?}
         */
        function (offset) { return scrollMaxStart * (offset - mouseDownOffset) / trackMaxStart; })), map((/**
         * @param {?} position
         * @return {?}
         */
        function (position) { return _this.handleDrag(position, scrollMaxStart); })), tap((/**
         * @param {?} position
         * @return {?}
         */
        function (position) { return _this.scrollTo(position); })), takeUntil(dragEnd)); })));
    };
    ThumbAdapter.propDecorators = {
        track: [{ type: Input }],
        dragging: [{ type: Output }]
    };
    return ThumbAdapter;
}());
export { ThumbAdapter };
if (false) {
    /** @type {?} */
    ThumbAdapter.prototype.track;
    /**
     * @type {?}
     * @private
     */
    ThumbAdapter.prototype._dragging;
    /** @type {?} */
    ThumbAdapter.prototype.dragging;
    /**
     * @type {?}
     * @protected
     */
    ThumbAdapter.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    ThumbAdapter.prototype.thumbElement;
    /**
     * @type {?}
     * @protected
     */
    ThumbAdapter.prototype.document;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThumbAdapter.prototype.pageProperty = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThumbAdapter.prototype.clientProperty = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ThumbAdapter.prototype.dragStartOffset = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ThumbAdapter.prototype.size = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThumbAdapter.prototype.viewportScrollSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThumbAdapter.prototype.viewportScrollOffset = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ThumbAdapter.prototype.viewportScrollMax = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThumbAdapter.prototype.setDragging = function (value) { };
    /**
     * @abstract
     * @protected
     * @param {?} position
     * @return {?}
     */
    ThumbAdapter.prototype.scrollTo = function (position) { };
    /**
     * @abstract
     * @protected
     * @param {?} position
     * @param {?} size
     * @return {?}
     */
    ThumbAdapter.prototype.updateStyles = function (position, size) { };
    /**
     * @abstract
     * @protected
     * @param {?} position
     * @param {?=} scrollMax
     * @return {?}
     */
    ThumbAdapter.prototype.handleDrag = function (position, scrollMax) { };
    /**
     * @abstract
     * @protected
     * @param {?} position
     * @param {?=} scrollMax
     * @return {?}
     */
    ThumbAdapter.prototype.handleDirection = function (position, scrollMax) { };
}
/**
 * Calculate scrollbar thumb size
 * @param {?} trackSize
 * @param {?} contentSize
 * @param {?} minThumbSize
 * @return {?}
 */
function calculateThumbSize(trackSize, contentSize, minThumbSize) {
    /** @type {?} */
    var scrollbarRatio = trackSize / contentSize;
    /** @type {?} */
    var thumbSize = scrollbarRatio * trackSize;
    return Math.max(~~thumbSize, minThumbSize);
}
/**
 * Calculate scrollbar thumb position
 * @param {?} scrollPosition
 * @param {?} scrollMax
 * @param {?} trackMax
 * @return {?}
 */
function calculateThumbPosition(scrollPosition, scrollMax, trackMax) {
    return scrollPosition * trackMax / scrollMax;
}
//# sourceMappingURL=data:application/json;base64,