/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Inject, Injectable, Optional } from '@angular/core';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
import * as i1 from "../ng-scrollbar.model";
/** @type {?} */
var defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    pointerEventsMethod: 'viewport',
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    scrollAuditTime: 0
};
var ScrollbarManager = /** @class */ (function () {
    function ScrollbarManager(options) {
        this.globalOptions = options ? tslib_1.__assign({}, defaultOptions, options) : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
    ScrollbarManager.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ScrollbarManager.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_SCROLLBAR_OPTIONS,] }] }
    ]; };
    /** @nocollapse */ ScrollbarManager.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ScrollbarManager_Factory() { return new ScrollbarManager(i0.ɵɵinject(i1.NG_SCROLLBAR_OPTIONS, 8)); }, token: ScrollbarManager, providedIn: "root" });
    return ScrollbarManager;
}());
export { ScrollbarManager };
if (false) {
    /** @type {?} */
    ScrollbarManager.prototype.globalOptions;
    /** @type {?} */
    ScrollbarManager.prototype.rtlScrollAxisType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3Njcm9sbGJhci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBRSxvQkFBb0IsRUFBcUIsTUFBTSx1QkFBdUIsQ0FBQztBQUNoRixPQUFPLEVBQUUsb0JBQW9CLEVBQXNCLE1BQU0sdUJBQXVCLENBQUM7Ozs7SUFFM0UsY0FBYyxHQUF1QjtJQUN6QyxTQUFTLEVBQUUsRUFBRTtJQUNiLFVBQVUsRUFBRSxFQUFFO0lBQ2QsVUFBVSxFQUFFLEVBQUU7SUFDZCxLQUFLLEVBQUUsVUFBVTtJQUNqQixVQUFVLEVBQUUsU0FBUztJQUNyQixVQUFVLEVBQUUsUUFBUTtJQUNwQixRQUFRLEVBQUUsUUFBUTtJQUNsQixtQkFBbUIsRUFBRSxVQUFVO0lBQy9CLHdCQUF3QixFQUFFLEdBQUc7SUFDN0IsWUFBWSxFQUFFLEVBQUU7SUFDaEIsb0JBQW9CLEVBQUUsQ0FBQztJQUN2QixjQUFjLEVBQUUsQ0FBQztJQUNqQixlQUFlLEVBQUUsQ0FBQztDQUNuQjtBQUVEO0lBTUUsMEJBQXNELE9BQTJCO1FBQy9FLElBQUksQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUMsc0JBQU0sY0FBYyxFQUFLLE9BQU8sRUFBRyxDQUFDLENBQUMsY0FBYyxDQUFDO1FBRWxGLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxvQkFBb0IsRUFBRSxDQUFDO0lBQ2xELENBQUM7O2dCQVZGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7Z0RBTW5CLFFBQVEsWUFBSSxNQUFNLFNBQUMsb0JBQW9COzs7MkJBMUJ0RDtDQStCQyxBQVhELElBV0M7U0FWWSxnQkFBZ0I7OztJQUMzQix5Q0FBMkM7O0lBRTNDLDZDQUE4QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgZ2V0UnRsU2Nyb2xsQXhpc1R5cGUsIFJ0bFNjcm9sbEF4aXNUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY2RrL3BsYXRmb3JtJztcclxuaW1wb3J0IHsgTkdfU0NST0xMQkFSX09QVElPTlMsIE5nU2Nyb2xsYmFyT3B0aW9ucyB9IGZyb20gJy4uL25nLXNjcm9sbGJhci5tb2RlbCc7XHJcblxyXG5jb25zdCBkZWZhdWx0T3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zID0ge1xyXG4gIHZpZXdDbGFzczogJycsXHJcbiAgdHJhY2tDbGFzczogJycsXHJcbiAgdGh1bWJDbGFzczogJycsXHJcbiAgdHJhY2s6ICd2ZXJ0aWNhbCcsXHJcbiAgYXBwZWFyYW5jZTogJ2NvbXBhY3QnLFxyXG4gIHZpc2liaWxpdHk6ICduYXRpdmUnLFxyXG4gIHBvc2l0aW9uOiAnbmF0aXZlJyxcclxuICBwb2ludGVyRXZlbnRzTWV0aG9kOiAndmlld3BvcnQnLFxyXG4gIHRyYWNrQ2xpY2tTY3JvbGxEdXJhdGlvbjogMzAwLFxyXG4gIG1pblRodW1iU2l6ZTogMjAsXHJcbiAgd2luZG93UmVzaXplRGVib3VuY2U6IDAsXHJcbiAgc2Vuc29yRGVib3VuY2U6IDAsXHJcbiAgc2Nyb2xsQXVkaXRUaW1lOiAwXHJcbn07XHJcblxyXG5ASW5qZWN0YWJsZSh7IHByb3ZpZGVkSW46ICdyb290JyB9KVxyXG5leHBvcnQgY2xhc3MgU2Nyb2xsYmFyTWFuYWdlciB7XHJcbiAgcmVhZG9ubHkgZ2xvYmFsT3B0aW9uczogTmdTY3JvbGxiYXJPcHRpb25zO1xyXG5cclxuICByZWFkb25seSBydGxTY3JvbGxBeGlzVHlwZTogUnRsU2Nyb2xsQXhpc1R5cGU7XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBJbmplY3QoTkdfU0NST0xMQkFSX09QVElPTlMpIG9wdGlvbnM6IE5nU2Nyb2xsYmFyT3B0aW9ucykge1xyXG4gICAgdGhpcy5nbG9iYWxPcHRpb25zID0gb3B0aW9ucyA/IHsgLi4uZGVmYXVsdE9wdGlvbnMsIC4uLm9wdGlvbnMgfSA6IGRlZmF1bHRPcHRpb25zO1xyXG5cclxuICAgIHRoaXMucnRsU2Nyb2xsQXhpc1R5cGUgPSBnZXRSdGxTY3JvbGxBeGlzVHlwZSgpO1xyXG4gIH1cclxufVxyXG4iXX0=