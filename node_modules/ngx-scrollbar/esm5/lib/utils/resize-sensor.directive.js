/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injectable, Inject, NgZone, Output, EventEmitter } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { from, of, EMPTY, BehaviorSubject, Observable } from 'rxjs';
import { catchError, debounceTime, map, switchMap } from 'rxjs/operators';
import { NgScrollbar } from '../ng-scrollbar';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/platform";
/**
 * Factory that initialize the ResizeObserver if available in the browser
 * Otherwise, it lazy-loads the ResizeObserver polyfill
 */
var ResizeObserverFactory = /** @class */ (function () {
    function ResizeObserverFactory(document, platform) {
        this.resizeObserverSource = new BehaviorSubject(null);
        this.resizeObserverLoader = this.resizeObserverSource.asObservable();
        if (platform.isBrowser) {
            /** @type {?} */
            var resizeObserverApi = document.defaultView.ResizeObserver
                ? of(document.defaultView.ResizeObserver)
                : from(import('@juggle/resize-observer')).pipe(map((/**
                 * @param {?} module
                 * @return {?}
                 */
                function (module) { return module.ResizeObserver; })), catchError((/**
                 * @param {?} e
                 * @return {?}
                 */
                function (e) {
                    console.log('Unable to load ResizeObserver polyfill', e);
                    return EMPTY;
                })));
            this.resizeObserverSource.next(resizeObserverApi);
        }
    }
    ResizeObserverFactory.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    ResizeObserverFactory.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: Platform }
    ]; };
    /** @nocollapse */ ResizeObserverFactory.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ResizeObserverFactory_Factory() { return new ResizeObserverFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: ResizeObserverFactory, providedIn: "root" });
    return ResizeObserverFactory;
}());
export { ResizeObserverFactory };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResizeObserverFactory.prototype.resizeObserverSource;
    /** @type {?} */
    ResizeObserverFactory.prototype.resizeObserverLoader;
}
var ResizeSensor = /** @class */ (function () {
    function ResizeSensor(zone, platform, resizeObserverFactory, scrollbar) {
        this.zone = zone;
        this.platform = platform;
        this.resizeObserverFactory = resizeObserverFactory;
        this.scrollbar = scrollbar;
        this._disabled = false;
        this._subscription = null;
        this.resizeSensor = new EventEmitter();
        if (!scrollbar) {
            throw new Error('[NgScrollbar Resize Sensor Directive]: Host element must be an NgScrollbar component.');
        }
    }
    Object.defineProperty(ResizeSensor.prototype, "debounce", {
        /** Debounce interval for emitting the changes. */
        get: /**
         * Debounce interval for emitting the changes.
         * @return {?}
         */
        function () {
            return this._debounce;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._debounce = coerceNumberProperty(value);
            this._subscribe();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ResizeSensor.prototype, "disabled", {
        /** Whether ResizeObserver is disabled. */
        get: /**
         * Whether ResizeObserver is disabled.
         * @return {?}
         */
        function () {
            return this._disabled;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._disabled = coerceBooleanProperty(value);
            this._disabled ? this._unsubscribe() : this._subscribe();
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    ResizeSensor.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        if (!this._subscription && !this._disabled) {
            this._subscribe();
        }
    };
    /**
     * @return {?}
     */
    ResizeSensor.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this._unsubscribe();
    };
    /**
     * @private
     * @param {?} ResizeObserver
     * @return {?}
     */
    ResizeSensor.prototype._createObserver = /**
     * @private
     * @param {?} ResizeObserver
     * @return {?}
     */
    function (ResizeObserver) {
        var _this = this;
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            _this._resizeObserver = new ResizeObserver((/**
             * @return {?}
             */
            function () { return observer.next(); }));
            _this._resizeObserver.observe(_this.scrollbar.viewport.nativeElement);
            if (_this.scrollbar.viewport.contentWrapperElement) {
                _this._resizeObserver.observe(_this.scrollbar.viewport.contentWrapperElement);
            }
        }));
    };
    /**
     * @private
     * @return {?}
     */
    ResizeSensor.prototype._subscribe = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this._unsubscribe();
        if (this.platform.isBrowser) {
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            function () {
                _this._subscription = _this.resizeObserverFactory.resizeObserverLoader.pipe(switchMap((/**
                 * @param {?} moduleObservable
                 * @return {?}
                 */
                function (moduleObservable) { return moduleObservable; })), switchMap((/**
                 * @param {?} ResizeObserver
                 * @return {?}
                 */
                function (ResizeObserver) {
                    if (ResizeObserver) {
                        /** @type {?} */
                        var stream = _this._createObserver(ResizeObserver);
                        return _this.debounce ? stream.pipe(debounceTime(_this._debounce)) : stream;
                    }
                    else {
                        return EMPTY;
                    }
                }))).subscribe((/**
                 * @return {?}
                 */
                function () { return _this.resizeSensor.emit(); }));
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    ResizeSensor.prototype._unsubscribe = /**
     * @private
     * @return {?}
     */
    function () {
        if (this._resizeObserver) {
            this._resizeObserver.disconnect();
        }
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    };
    ResizeSensor.decorators = [
        { type: Directive, args: [{ selector: '[resizeSensor]' },] }
    ];
    /** @nocollapse */
    ResizeSensor.ctorParameters = function () { return [
        { type: NgZone },
        { type: Platform },
        { type: ResizeObserverFactory },
        { type: NgScrollbar }
    ]; };
    ResizeSensor.propDecorators = {
        debounce: [{ type: Input, args: ['sensorDebounce',] }],
        disabled: [{ type: Input, args: ['sensorDisabled',] }],
        resizeSensor: [{ type: Output }]
    };
    return ResizeSensor;
}());
export { ResizeSensor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._debounce;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._resizeObserver;
    /** @type {?} */
    ResizeSensor.prototype.resizeSensor;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.resizeObserverFactory;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.scrollbar;
}
//# sourceMappingURL=data:application/json;base64,