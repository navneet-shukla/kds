/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { fromEvent, merge, Observable } from 'rxjs';
import { map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { stopPropagation } from './scrollbar/common';
export class ScrollViewport {
    /**
     * @param {?} viewPort
     * @param {?} document
     */
    constructor(viewPort, document) {
        this.viewPort = viewPort;
        this.document = document;
        this.nativeElement = viewPort.nativeElement;
    }
    // Get viewport size, clientHeight or clientWidth
    /**
     * @return {?}
     */
    get clientHeight() {
        return this.nativeElement.clientHeight;
    }
    /**
     * @return {?}
     */
    get clientWidth() {
        return this.nativeElement.clientWidth;
    }
    /**
     * @return {?}
     */
    get scrollHeight() {
        return this.nativeElement.scrollHeight;
    }
    /**
     * @return {?}
     */
    get scrollWidth() {
        return this.nativeElement.scrollWidth;
    }
    // Get viewport scroll offset, scrollTop or scrollLeft
    /**
     * @return {?}
     */
    get scrollTop() {
        return this.nativeElement.scrollTop;
    }
    /**
     * @return {?}
     */
    get scrollLeft() {
        return this.nativeElement.scrollLeft;
    }
    // Get the available scrollable size
    /**
     * @return {?}
     */
    get scrollMaxX() {
        return this.scrollWidth - this.clientWidth;
    }
    /**
     * @return {?}
     */
    get scrollMaxY() {
        return this.scrollHeight - this.clientHeight;
    }
    /**
     * @return {?}
     */
    get contentHeight() {
        return this.contentWrapperElement.clientHeight;
    }
    /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     * @param {?} destroyed
     * @return {?}
     */
    activatePointerEvents(destroyed) {
        this.hovered = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            // Stream that emits when pointer is moved over the viewport (used to set the hovered state)
            /** @type {?} */
            const mouseMove = fromEvent(this.nativeElement, 'mousemove', { passive: true }).pipe(stopPropagation());
            // Stream that emits when pointer leaves the viewport (used to remove the hovered state)
            /** @type {?} */
            const mouseLeave = fromEvent(this.nativeElement, 'mouseleave').pipe(map((/**
             * @return {?}
             */
            () => false)));
            merge(mouseMove, mouseLeave).pipe(tap((/**
             * @param {?} e
             * @return {?}
             */
            (e) => observer.next(e))), takeUntil(destroyed)).subscribe();
        }));
        this.clicked = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            /** @type {?} */
            const mouseDown = fromEvent(this.nativeElement, 'mousedown', { passive: true }).pipe(tap((/**
             * @param {?} e
             * @return {?}
             */
            (e) => observer.next(e))));
            /** @type {?} */
            const mouseUp = fromEvent(this.nativeElement, 'mouseup', { passive: true }).pipe(tap((/**
             * @return {?}
             */
            () => observer.next(false))));
            mouseDown.pipe(switchMap((/**
             * @return {?}
             */
            () => mouseUp)), takeUntil(destroyed)).subscribe();
        }));
    }
    /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     * @return {?}
     */
    setAsWrapper() {
        // In this case the default viewport and the default content wrapper will act as a mask
        this.nativeElement.className = 'ng-native-scrollbar-hider ng-scroll-layer';
        if (this.nativeElement.firstElementChild) {
            this.nativeElement.firstElementChild.className = 'ng-scroll-layer';
        }
    }
    /**
     * Set this directive as  the viewport, called when no custom viewport is used
     * @param {?} customClassName
     * @return {?}
     */
    setAsViewport(customClassName) {
        this.nativeElement.className = `ng-native-scrollbar-hider ng-scroll-viewport ${customClassName}`;
        // Check if the custom viewport has only one child and set it as the content wrapper
        if (this.nativeElement.firstElementChild) {
            this.contentWrapperElement = (/** @type {?} */ (this.nativeElement.firstElementChild));
            this.contentWrapperElement.classList.add('ng-scroll-content');
        }
    }
    /**
     * Scroll viewport vertically
     * @param {?} value
     * @return {?}
     */
    scrollYTo(value) {
        this.nativeElement.scrollTop = value;
    }
    /**
     * Scroll viewport horizontally
     * @param {?} value
     * @return {?}
     */
    scrollXTo(value) {
        this.nativeElement.scrollLeft = value;
    }
}
ScrollViewport.decorators = [
    { type: Directive, args: [{
                selector: '[scrollViewport]'
            },] }
];
/** @nocollapse */
ScrollViewport.ctorParameters = () => [
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /** @type {?} */
    ScrollViewport.prototype.nativeElement;
    /** @type {?} */
    ScrollViewport.prototype.contentWrapperElement;
    /** @type {?} */
    ScrollViewport.prototype.hovered;
    /** @type {?} */
    ScrollViewport.prototype.clicked;
    /** @type {?} */
    ScrollViewport.prototype.viewPort;
    /**
     * @type {?}
     * @private
     */
    ScrollViewport.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXZpZXdwb3J0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbImxpYi9zY3JvbGwtdmlld3BvcnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFZLE1BQU0sTUFBTSxDQUFDO0FBQzlELE9BQU8sRUFBRSxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFLckQsTUFBTSxPQUFPLGNBQWM7Ozs7O0lBa0R6QixZQUFtQixRQUFvQixFQUNELFFBQWE7UUFEaEMsYUFBUSxHQUFSLFFBQVEsQ0FBWTtRQUNELGFBQVEsR0FBUixRQUFRLENBQUs7UUFDakQsSUFBSSxDQUFDLGFBQWEsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDO0lBQzlDLENBQUM7Ozs7O0lBekNELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQzs7OztJQUVELElBQUksWUFBWTtRQUNkLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7SUFDekMsQ0FBQzs7OztJQUVELElBQUksV0FBVztRQUNiLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7SUFDeEMsQ0FBQzs7Ozs7SUFHRCxJQUFJLFNBQVM7UUFDWCxPQUFPLElBQUksQ0FBQyxh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Q0FBQyxpQkFBaUIsRUFBZSxDQUFDO1lBQ2pGLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQUM7U0FDL0Q7SUFDSCxDQUFDOzs7Ozs7SUFLRCxTQUFTLENBQUMsS0FBYTtRQUNyQixJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUM7SUFDdkMsQ0FBQzs7Ozs7O0lBS0QsU0FBUyxDQUFDLEtBQWE7UUFDckIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO0lBQ3hDLENBQUM7OztZQTFIRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLGtCQUFrQjthQUM3Qjs7OztZQVIyQixVQUFVOzRDQTREdkIsTUFBTSxTQUFDLFFBQVE7Ozs7SUFqRDVCLHVDQUFvQzs7SUFFcEMsK0NBQW9DOztJQUdwQyxpQ0FBOEI7O0lBRTlCLGlDQUEwQjs7SUF5Q2Qsa0NBQTJCOzs7OztJQUMzQixrQ0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEluamVjdCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7IGZyb21FdmVudCwgbWVyZ2UsIE9ic2VydmFibGUsIE9ic2VydmVyIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwLCB0YWtlVW50aWwsIHRhcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgc3RvcFByb3BhZ2F0aW9uIH0gZnJvbSAnLi9zY3JvbGxiYXIvY29tbW9uJztcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW3Njcm9sbFZpZXdwb3J0XSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNjcm9sbFZpZXdwb3J0IHtcclxuICAvLyBWaWV3cG9ydCBlbGVtZW50XHJcbiAgcmVhZG9ubHkgbmF0aXZlRWxlbWVudDogSFRNTEVsZW1lbnQ7XHJcbiAgLy8gQ29udGVudCB3cmFwcGVyIGVsZW1lbnRcclxuICBjb250ZW50V3JhcHBlckVsZW1lbnQhOiBIVE1MRWxlbWVudDtcclxuXHJcbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBwb2ludGVyIGV2ZW50IHdoZW4gdGhlIHZpZXdwb3J0IGlzIGhvdmVyZWQgYW5kIGVtaXRzIGZhbHNlIHZhbHVlIHdoZW4gaXNuJ3QgaG92ZXJlZFxyXG4gIGhvdmVyZWQhOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xyXG4gIC8vIFN0cmVhbSB0aGF0IGVtaXRzIHdoZW4gdmlld3BvcnQgaXMgY2xpY2tlZFxyXG4gIGNsaWNrZWQhOiBPYnNlcnZhYmxlPGFueT47XHJcblxyXG4gIC8vIEdldCB2aWV3cG9ydCBzaXplLCBjbGllbnRIZWlnaHQgb3IgY2xpZW50V2lkdGhcclxuICBnZXQgY2xpZW50SGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcclxuICB9XHJcblxyXG4gIGdldCBjbGllbnRXaWR0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aDtcclxuICB9XHJcblxyXG4gIGdldCBzY3JvbGxIZWlnaHQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsSGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgZ2V0IHNjcm9sbFdpZHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5uYXRpdmVFbGVtZW50LnNjcm9sbFdpZHRoO1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IHZpZXdwb3J0IHNjcm9sbCBvZmZzZXQsIHNjcm9sbFRvcCBvciBzY3JvbGxMZWZ0XHJcbiAgZ2V0IHNjcm9sbFRvcCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxUb3A7XHJcbiAgfVxyXG5cclxuICBnZXQgc2Nyb2xsTGVmdCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0O1xyXG4gIH1cclxuXHJcbiAgLy8gR2V0IHRoZSBhdmFpbGFibGUgc2Nyb2xsYWJsZSBzaXplXHJcbiAgZ2V0IHNjcm9sbE1heFgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnNjcm9sbFdpZHRoIC0gdGhpcy5jbGllbnRXaWR0aDtcclxuICB9XHJcblxyXG4gIGdldCBzY3JvbGxNYXhZKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5zY3JvbGxIZWlnaHQgLSB0aGlzLmNsaWVudEhlaWdodDtcclxuICB9XHJcblxyXG4gIGdldCBjb250ZW50SGVpZ2h0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250ZW50V3JhcHBlckVsZW1lbnQuY2xpZW50SGVpZ2h0O1xyXG4gIH1cclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHZpZXdQb3J0OiBFbGVtZW50UmVmLFxyXG4gICAgICAgICAgICAgIEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSkge1xyXG4gICAgdGhpcy5uYXRpdmVFbGVtZW50ID0gdmlld1BvcnQubmF0aXZlRWxlbWVudDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFjdGl2YXRlIHZpZXdwb3J0IHBvaW50ZXIgZXZlbnRzIHN1Y2ggYXMgJ2hvdmVyZWQnIGFuZCAnY2xpY2tlZCcgZXZlbnRzXHJcbiAgICovXHJcbiAgYWN0aXZhdGVQb2ludGVyRXZlbnRzKGRlc3Ryb3llZDogT2JzZXJ2YWJsZTxhbnk+KTogdm9pZCB7XHJcbiAgICB0aGlzLmhvdmVyZWQgPSBuZXcgT2JzZXJ2YWJsZSgob2JzZXJ2ZXI6IE9ic2VydmVyPGFueT4pID0+IHtcclxuICAgICAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBwb2ludGVyIGlzIG1vdmVkIG92ZXIgdGhlIHZpZXdwb3J0ICh1c2VkIHRvIHNldCB0aGUgaG92ZXJlZCBzdGF0ZSlcclxuICAgICAgY29uc3QgbW91c2VNb3ZlID0gZnJvbUV2ZW50KHRoaXMubmF0aXZlRWxlbWVudCwgJ21vdXNlbW92ZScsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKHN0b3BQcm9wYWdhdGlvbigpKTtcclxuICAgICAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBwb2ludGVyIGxlYXZlcyB0aGUgdmlld3BvcnQgKHVzZWQgdG8gcmVtb3ZlIHRoZSBob3ZlcmVkIHN0YXRlKVxyXG4gICAgICBjb25zdCBtb3VzZUxlYXZlID0gZnJvbUV2ZW50KHRoaXMubmF0aXZlRWxlbWVudCwgJ21vdXNlbGVhdmUnKS5waXBlKG1hcCgoKSA9PiBmYWxzZSkpO1xyXG4gICAgICBtZXJnZShtb3VzZU1vdmUsIG1vdXNlTGVhdmUpLnBpcGUoXHJcbiAgICAgICAgdGFwKChlOiBmYWxzZSB8IGFueSkgPT4gb2JzZXJ2ZXIubmV4dChlKSksXHJcbiAgICAgICAgdGFrZVVudGlsKGRlc3Ryb3llZClcclxuICAgICAgKS5zdWJzY3JpYmUoKTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuY2xpY2tlZCA9IG5ldyBPYnNlcnZhYmxlKChvYnNlcnZlcjogT2JzZXJ2ZXI8YW55PikgPT4ge1xyXG4gICAgICBjb25zdCBtb3VzZURvd24gPSBmcm9tRXZlbnQodGhpcy5uYXRpdmVFbGVtZW50LCAnbW91c2Vkb3duJywgeyBwYXNzaXZlOiB0cnVlIH0pLnBpcGUoXHJcbiAgICAgICAgdGFwKChlOiBhbnkpID0+IG9ic2VydmVyLm5leHQoZSkpXHJcbiAgICAgICk7XHJcbiAgICAgIGNvbnN0IG1vdXNlVXAgPSBmcm9tRXZlbnQodGhpcy5uYXRpdmVFbGVtZW50LCAnbW91c2V1cCcsIHsgcGFzc2l2ZTogdHJ1ZSB9KS5waXBlKFxyXG4gICAgICAgIHRhcCgoKSA9PiBvYnNlcnZlci5uZXh0KGZhbHNlKSlcclxuICAgICAgKTtcclxuICAgICAgbW91c2VEb3duLnBpcGUoXHJcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+IG1vdXNlVXApLFxyXG4gICAgICAgIHRha2VVbnRpbChkZXN0cm95ZWQpXHJcbiAgICAgICkuc3Vic2NyaWJlKCk7XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGlzIGRpcmVjdGl2ZSBhcyBhIG5vbi1mdW5jdGlvbmFsIHdyYXBwZXIsIGNhbGxlZCB3aGVuIGEgY3VzdG9tIHZpZXdwb3J0IGlzIHVzZWRcclxuICAgKi9cclxuICBzZXRBc1dyYXBwZXIoKTogdm9pZCB7XHJcbiAgICAvLyBJbiB0aGlzIGNhc2UgdGhlIGRlZmF1bHQgdmlld3BvcnQgYW5kIHRoZSBkZWZhdWx0IGNvbnRlbnQgd3JhcHBlciB3aWxsIGFjdCBhcyBhIG1hc2tcclxuICAgIHRoaXMubmF0aXZlRWxlbWVudC5jbGFzc05hbWUgPSAnbmctbmF0aXZlLXNjcm9sbGJhci1oaWRlciBuZy1zY3JvbGwtbGF5ZXInO1xyXG4gICAgaWYgKHRoaXMubmF0aXZlRWxlbWVudC5maXJzdEVsZW1lbnRDaGlsZCkge1xyXG4gICAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQuY2xhc3NOYW1lID0gJ25nLXNjcm9sbC1sYXllcic7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhpcyBkaXJlY3RpdmUgYXMgIHRoZSB2aWV3cG9ydCwgY2FsbGVkIHdoZW4gbm8gY3VzdG9tIHZpZXdwb3J0IGlzIHVzZWRcclxuICAgKi9cclxuICBzZXRBc1ZpZXdwb3J0KGN1c3RvbUNsYXNzTmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuY2xhc3NOYW1lID0gYG5nLW5hdGl2ZS1zY3JvbGxiYXItaGlkZXIgbmctc2Nyb2xsLXZpZXdwb3J0ICR7Y3VzdG9tQ2xhc3NOYW1lfWA7XHJcbiAgICAvLyBDaGVjayBpZiB0aGUgY3VzdG9tIHZpZXdwb3J0IGhhcyBvbmx5IG9uZSBjaGlsZCBhbmQgc2V0IGl0IGFzIHRoZSBjb250ZW50IHdyYXBwZXJcclxuICAgIGlmICh0aGlzLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQpIHtcclxuICAgICAgdGhpcy5jb250ZW50V3JhcHBlckVsZW1lbnQgPSB0aGlzLm5hdGl2ZUVsZW1lbnQuZmlyc3RFbGVtZW50Q2hpbGQgYXMgSFRNTEVsZW1lbnQ7XHJcbiAgICAgIHRoaXMuY29udGVudFdyYXBwZXJFbGVtZW50LmNsYXNzTGlzdC5hZGQoJ25nLXNjcm9sbC1jb250ZW50Jyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTY3JvbGwgdmlld3BvcnQgdmVydGljYWxseVxyXG4gICAqL1xyXG4gIHNjcm9sbFlUbyh2YWx1ZTogbnVtYmVyKTogdm9pZCB7XHJcbiAgICB0aGlzLm5hdGl2ZUVsZW1lbnQuc2Nyb2xsVG9wID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTY3JvbGwgdmlld3BvcnQgaG9yaXpvbnRhbGx5XHJcbiAgICovXHJcbiAgc2Nyb2xsWFRvKHZhbHVlOiBudW1iZXIpOiB2b2lkIHtcclxuICAgIHRoaXMubmF0aXZlRWxlbWVudC5zY3JvbGxMZWZ0ID0gdmFsdWU7XHJcbiAgfVxyXG59XHJcbiJdfQ==