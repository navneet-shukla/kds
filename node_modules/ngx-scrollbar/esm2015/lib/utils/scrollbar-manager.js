/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable, Optional } from '@angular/core';
import { getRtlScrollAxisType } from '@angular/cdk/platform';
import { NG_SCROLLBAR_OPTIONS } from '../ng-scrollbar.model';
import * as i0 from "@angular/core";
import * as i1 from "../ng-scrollbar.model";
/** @type {?} */
const defaultOptions = {
    viewClass: '',
    trackClass: '',
    thumbClass: '',
    track: 'vertical',
    appearance: 'compact',
    visibility: 'native',
    position: 'native',
    pointerEventsMethod: 'viewport',
    trackClickScrollDuration: 300,
    minThumbSize: 20,
    windowResizeDebounce: 0,
    sensorDebounce: 0,
    scrollAuditTime: 0
};
export class ScrollbarManager {
    /**
     * @param {?} options
     */
    constructor(options) {
        this.globalOptions = options ? Object.assign({}, defaultOptions, options) : defaultOptions;
        this.rtlScrollAxisType = getRtlScrollAxisType();
    }
}
ScrollbarManager.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ScrollbarManager.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [NG_SCROLLBAR_OPTIONS,] }] }
];
/** @nocollapse */ ScrollbarManager.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ScrollbarManager_Factory() { return new ScrollbarManager(i0.ɵɵinject(i1.NG_SCROLLBAR_OPTIONS, 8)); }, token: ScrollbarManager, providedIn: "root" });
if (false) {
    /** @type {?} */
    ScrollbarManager.prototype.globalOptions;
    /** @type {?} */
    ScrollbarManager.prototype.rtlScrollAxisType;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLW1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL3Njcm9sbGJhci1tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFFLG9CQUFvQixFQUFxQixNQUFNLHVCQUF1QixDQUFDO0FBQ2hGLE9BQU8sRUFBRSxvQkFBb0IsRUFBc0IsTUFBTSx1QkFBdUIsQ0FBQzs7OztNQUUzRSxjQUFjLEdBQXVCO0lBQ3pDLFNBQVMsRUFBRSxFQUFFO0lBQ2IsVUFBVSxFQUFFLEVBQUU7SUFDZCxVQUFVLEVBQUUsRUFBRTtJQUNkLEtBQUssRUFBRSxVQUFVO0lBQ2pCLFVBQVUsRUFBRSxTQUFTO0lBQ3JCLFVBQVUsRUFBRSxRQUFRO0lBQ3BCLFFBQVEsRUFBRSxRQUFRO0lBQ2xCLG1CQUFtQixFQUFFLFVBQVU7SUFDL0Isd0JBQXdCLEVBQUUsR0FBRztJQUM3QixZQUFZLEVBQUUsRUFBRTtJQUNoQixvQkFBb0IsRUFBRSxDQUFDO0lBQ3ZCLGNBQWMsRUFBRSxDQUFDO0lBQ2pCLGVBQWUsRUFBRSxDQUFDO0NBQ25CO0FBR0QsTUFBTSxPQUFPLGdCQUFnQjs7OztJQUszQixZQUFzRCxPQUEyQjtRQUMvRSxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxDQUFDLG1CQUFNLGNBQWMsRUFBSyxPQUFPLEVBQUcsQ0FBQyxDQUFDLGNBQWMsQ0FBQztRQUVsRixJQUFJLENBQUMsaUJBQWlCLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztJQUNsRCxDQUFDOzs7WUFWRixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7OzRDQU1uQixRQUFRLFlBQUksTUFBTSxTQUFDLG9CQUFvQjs7Ozs7SUFKcEQseUNBQTJDOztJQUUzQyw2Q0FBOEMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGdldFJ0bFNjcm9sbEF4aXNUeXBlLCBSdGxTY3JvbGxBeGlzVHlwZSB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9wbGF0Zm9ybSc7XHJcbmltcG9ydCB7IE5HX1NDUk9MTEJBUl9PUFRJT05TLCBOZ1Njcm9sbGJhck9wdGlvbnMgfSBmcm9tICcuLi9uZy1zY3JvbGxiYXIubW9kZWwnO1xyXG5cclxuY29uc3QgZGVmYXVsdE9wdGlvbnM6IE5nU2Nyb2xsYmFyT3B0aW9ucyA9IHtcclxuICB2aWV3Q2xhc3M6ICcnLFxyXG4gIHRyYWNrQ2xhc3M6ICcnLFxyXG4gIHRodW1iQ2xhc3M6ICcnLFxyXG4gIHRyYWNrOiAndmVydGljYWwnLFxyXG4gIGFwcGVhcmFuY2U6ICdjb21wYWN0JyxcclxuICB2aXNpYmlsaXR5OiAnbmF0aXZlJyxcclxuICBwb3NpdGlvbjogJ25hdGl2ZScsXHJcbiAgcG9pbnRlckV2ZW50c01ldGhvZDogJ3ZpZXdwb3J0JyxcclxuICB0cmFja0NsaWNrU2Nyb2xsRHVyYXRpb246IDMwMCxcclxuICBtaW5UaHVtYlNpemU6IDIwLFxyXG4gIHdpbmRvd1Jlc2l6ZURlYm91bmNlOiAwLFxyXG4gIHNlbnNvckRlYm91bmNlOiAwLFxyXG4gIHNjcm9sbEF1ZGl0VGltZTogMFxyXG59O1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIFNjcm9sbGJhck1hbmFnZXIge1xyXG4gIHJlYWRvbmx5IGdsb2JhbE9wdGlvbnM6IE5nU2Nyb2xsYmFyT3B0aW9ucztcclxuXHJcbiAgcmVhZG9ubHkgcnRsU2Nyb2xsQXhpc1R5cGU6IFJ0bFNjcm9sbEF4aXNUeXBlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KE5HX1NDUk9MTEJBUl9PUFRJT05TKSBvcHRpb25zOiBOZ1Njcm9sbGJhck9wdGlvbnMpIHtcclxuICAgIHRoaXMuZ2xvYmFsT3B0aW9ucyA9IG9wdGlvbnMgPyB7IC4uLmRlZmF1bHRPcHRpb25zLCAuLi5vcHRpb25zIH0gOiBkZWZhdWx0T3B0aW9ucztcclxuXHJcbiAgICB0aGlzLnJ0bFNjcm9sbEF4aXNUeXBlID0gZ2V0UnRsU2Nyb2xsQXhpc1R5cGUoKTtcclxuICB9XHJcbn1cclxuIl19