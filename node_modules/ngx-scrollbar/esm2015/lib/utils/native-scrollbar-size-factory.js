/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { BehaviorSubject, fromEvent, of } from 'rxjs';
import { debounceTime, tap, switchMap } from 'rxjs/operators';
import { ScrollbarManager } from './scrollbar-manager';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./scrollbar-manager";
import * as i3 from "@angular/cdk/platform";
export class NativeScrollbarSizeFactory {
    /**
     * @param {?} document
     * @param {?} manager
     * @param {?} platform
     */
    constructor(document, manager, platform) {
        this.document = document;
        this.manager = manager;
        this.platform = platform;
        if (platform.isBrowser) {
            of(null).pipe(tap((/**
             * @return {?}
             */
            () => this._nativeScrollbarSize = new BehaviorSubject(this.getNativeScrollbarSize()))), tap((/**
             * @return {?}
             */
            () => this.nativeScrollbarSize = this._nativeScrollbarSize.asObservable())), switchMap((/**
             * @return {?}
             */
            () => fromEvent(this.document.defaultView, 'resize', { passive: true }))), debounceTime((/** @type {?} */ (this.manager.globalOptions.windowResizeDebounce))), tap((/**
             * @return {?}
             */
            () => this._nativeScrollbarSize.next(this.getNativeScrollbarSize())))).subscribe();
        }
    }
    /**
     * Get native scrollbar size
     * @private
     * @return {?}
     */
    getNativeScrollbarSize() {
        if (this.platform.ANDROID || this.platform.IOS) {
            return 6;
        }
        /** @type {?} */
        const box = this.document.createElement('div');
        box.className = 'ng-scrollbar-measure';
        this.document.body.appendChild(box);
        /** @type {?} */
        const size = box.getBoundingClientRect().right;
        this.document.body.removeChild(box);
        // if size is 0, return 15 (for MAC OS browsers)
        return size || 15;
    }
}
NativeScrollbarSizeFactory.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
NativeScrollbarSizeFactory.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: ScrollbarManager },
    { type: Platform }
];
/** @nocollapse */ NativeScrollbarSizeFactory.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function NativeScrollbarSizeFactory_Factory() { return new NativeScrollbarSizeFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.ScrollbarManager), i0.ɵɵinject(i3.Platform)); }, token: NativeScrollbarSizeFactory, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype._nativeScrollbarSize;
    /** @type {?} */
    NativeScrollbarSizeFactory.prototype.nativeScrollbarSize;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.document;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.manager;
    /**
     * @type {?}
     * @private
     */
    NativeScrollbarSizeFactory.prototype.platform;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNjcm9sbGJhci1zaXplLWZhY3RvcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3V0aWxzL25hdGl2ZS1zY3JvbGxiYXItc2l6ZS1mYWN0b3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDM0MsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ2pELE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNsRSxPQUFPLEVBQUUsWUFBWSxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7QUFHdkQsTUFBTSxPQUFPLDBCQUEwQjs7Ozs7O0lBSXJDLFlBQXNDLFFBQWEsRUFDL0IsT0FBeUIsRUFDekIsUUFBa0I7UUFGQSxhQUFRLEdBQVIsUUFBUSxDQUFLO1FBQy9CLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQ3pCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDcEMsSUFBSSxRQUFRLENBQUMsU0FBUyxFQUFFO1lBQ3RCLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQ1gsR0FBRzs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksZUFBZSxDQUFTLElBQUksQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEVBQUMsRUFDakcsR0FBRzs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxZQUFZLEVBQUUsRUFBQyxFQUM5RSxTQUFTOzs7WUFBQyxHQUFHLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLEVBQUUsUUFBUSxFQUFFLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBRSxDQUFDLEVBQUMsRUFDbEYsWUFBWSxDQUFDLG1CQUFBLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLG9CQUFvQixFQUFDLENBQUMsRUFDOUQsR0FBRzs7O1lBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLG9CQUFvQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxFQUFDLENBQ3pFLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDZjtJQUNILENBQUM7Ozs7OztJQUtPLHNCQUFzQjtRQUM1QixJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFO1lBQzlDLE9BQU8sQ0FBQyxDQUFDO1NBQ1Y7O2NBQ0ssR0FBRyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQztRQUM5QyxHQUFHLENBQUMsU0FBUyxHQUFHLHNCQUFzQixDQUFDO1FBQ3ZDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQzs7Y0FDOUIsSUFBSSxHQUFHLEdBQUcsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLEtBQUs7UUFDOUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3BDLGdEQUFnRDtRQUNoRCxPQUFPLElBQUksSUFBSSxFQUFFLENBQUM7SUFDcEIsQ0FBQzs7O1lBakNGLFVBQVUsU0FBQyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUU7Ozs7NENBS25CLE1BQU0sU0FBQyxRQUFRO1lBUHJCLGdCQUFnQjtZQUhoQixRQUFROzs7Ozs7OztJQU9mLDBEQUFzRDs7SUFDdEQseURBQXdDOzs7OztJQUU1Qiw4Q0FBdUM7Ozs7O0lBQ3ZDLDZDQUFpQzs7Ozs7SUFDakMsOENBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuaW1wb3J0IHsgUGxhdGZvcm0gfSBmcm9tICdAYW5ndWxhci9jZGsvcGxhdGZvcm0nO1xyXG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIGZyb21FdmVudCwgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCB0YXAsIHN3aXRjaE1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuaW1wb3J0IHsgU2Nyb2xsYmFyTWFuYWdlciB9IGZyb20gJy4vc2Nyb2xsYmFyLW1hbmFnZXInO1xyXG5cclxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcclxuZXhwb3J0IGNsYXNzIE5hdGl2ZVNjcm9sbGJhclNpemVGYWN0b3J5IHtcclxuICBwcml2YXRlIF9uYXRpdmVTY3JvbGxiYXJTaXplOiBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPjtcclxuICBuYXRpdmVTY3JvbGxiYXJTaXplOiBPYnNlcnZhYmxlPG51bWJlcj47XHJcblxyXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgZG9jdW1lbnQ6IGFueSxcclxuICAgICAgICAgICAgICBwcml2YXRlIG1hbmFnZXI6IFNjcm9sbGJhck1hbmFnZXIsXHJcbiAgICAgICAgICAgICAgcHJpdmF0ZSBwbGF0Zm9ybTogUGxhdGZvcm0pIHtcclxuICAgIGlmIChwbGF0Zm9ybS5pc0Jyb3dzZXIpIHtcclxuICAgICAgb2YobnVsbCkucGlwZShcclxuICAgICAgICB0YXAoKCkgPT4gdGhpcy5fbmF0aXZlU2Nyb2xsYmFyU2l6ZSA9IG5ldyBCZWhhdmlvclN1YmplY3Q8bnVtYmVyPih0aGlzLmdldE5hdGl2ZVNjcm9sbGJhclNpemUoKSkpLFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLm5hdGl2ZVNjcm9sbGJhclNpemUgPSB0aGlzLl9uYXRpdmVTY3JvbGxiYXJTaXplLmFzT2JzZXJ2YWJsZSgpKSxcclxuICAgICAgICBzd2l0Y2hNYXAoKCkgPT4gZnJvbUV2ZW50KHRoaXMuZG9jdW1lbnQuZGVmYXVsdFZpZXcsICdyZXNpemUnLCB7IHBhc3NpdmU6IHRydWUgfSkpLFxyXG4gICAgICAgIGRlYm91bmNlVGltZSh0aGlzLm1hbmFnZXIuZ2xvYmFsT3B0aW9ucy53aW5kb3dSZXNpemVEZWJvdW5jZSEpLFxyXG4gICAgICAgIHRhcCgoKSA9PiB0aGlzLl9uYXRpdmVTY3JvbGxiYXJTaXplLm5leHQodGhpcy5nZXROYXRpdmVTY3JvbGxiYXJTaXplKCkpKVxyXG4gICAgICApLnN1YnNjcmliZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG5hdGl2ZSBzY3JvbGxiYXIgc2l6ZVxyXG4gICAqL1xyXG4gIHByaXZhdGUgZ2V0TmF0aXZlU2Nyb2xsYmFyU2l6ZSgpOiBudW1iZXIge1xyXG4gICAgaWYgKHRoaXMucGxhdGZvcm0uQU5EUk9JRCB8fCB0aGlzLnBsYXRmb3JtLklPUykge1xyXG4gICAgICByZXR1cm4gNjtcclxuICAgIH1cclxuICAgIGNvbnN0IGJveCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBib3guY2xhc3NOYW1lID0gJ25nLXNjcm9sbGJhci1tZWFzdXJlJztcclxuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChib3gpO1xyXG4gICAgY29uc3Qgc2l6ZSA9IGJveC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodDtcclxuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChib3gpO1xyXG4gICAgLy8gaWYgc2l6ZSBpcyAwLCByZXR1cm4gMTUgKGZvciBNQUMgT1MgYnJvd3NlcnMpXHJcbiAgICByZXR1cm4gc2l6ZSB8fCAxNTtcclxuICB9XHJcbn1cclxuIl19