/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Injectable, Inject, NgZone, Output, EventEmitter } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Platform } from '@angular/cdk/platform';
import { coerceBooleanProperty, coerceNumberProperty } from '@angular/cdk/coercion';
import { from, of, EMPTY, BehaviorSubject, Observable } from 'rxjs';
import { catchError, debounceTime, map, switchMap } from 'rxjs/operators';
import { NgScrollbar } from '../ng-scrollbar';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/cdk/platform";
/**
 * Factory that initialize the ResizeObserver if available in the browser
 * Otherwise, it lazy-loads the ResizeObserver polyfill
 */
export class ResizeObserverFactory {
    /**
     * @param {?} document
     * @param {?} platform
     */
    constructor(document, platform) {
        this.resizeObserverSource = new BehaviorSubject(null);
        this.resizeObserverLoader = this.resizeObserverSource.asObservable();
        if (platform.isBrowser) {
            /** @type {?} */
            const resizeObserverApi = document.defaultView.ResizeObserver
                ? of(document.defaultView.ResizeObserver)
                : from(import('@juggle/resize-observer')).pipe(map((/**
                 * @param {?} module
                 * @return {?}
                 */
                (module) => module.ResizeObserver)), catchError((/**
                 * @param {?} e
                 * @return {?}
                 */
                (e) => {
                    console.log('Unable to load ResizeObserver polyfill', e);
                    return EMPTY;
                })));
            this.resizeObserverSource.next(resizeObserverApi);
        }
    }
}
ResizeObserverFactory.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
ResizeObserverFactory.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Platform }
];
/** @nocollapse */ ResizeObserverFactory.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function ResizeObserverFactory_Factory() { return new ResizeObserverFactory(i0.ɵɵinject(i1.DOCUMENT), i0.ɵɵinject(i2.Platform)); }, token: ResizeObserverFactory, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResizeObserverFactory.prototype.resizeObserverSource;
    /** @type {?} */
    ResizeObserverFactory.prototype.resizeObserverLoader;
}
export class ResizeSensor {
    /**
     * @param {?} zone
     * @param {?} platform
     * @param {?} resizeObserverFactory
     * @param {?} scrollbar
     */
    constructor(zone, platform, resizeObserverFactory, scrollbar) {
        this.zone = zone;
        this.platform = platform;
        this.resizeObserverFactory = resizeObserverFactory;
        this.scrollbar = scrollbar;
        this._disabled = false;
        this._subscription = null;
        this.resizeSensor = new EventEmitter();
        if (!scrollbar) {
            throw new Error('[NgScrollbar Resize Sensor Directive]: Host element must be an NgScrollbar component.');
        }
    }
    /**
     * Debounce interval for emitting the changes.
     * @return {?}
     */
    get debounce() {
        return this._debounce;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set debounce(value) {
        this._debounce = coerceNumberProperty(value);
        this._subscribe();
    }
    /**
     * Whether ResizeObserver is disabled.
     * @return {?}
     */
    get disabled() {
        return this._disabled;
    }
    /**
     * @param {?} value
     * @return {?}
     */
    set disabled(value) {
        this._disabled = coerceBooleanProperty(value);
        this._disabled ? this._unsubscribe() : this._subscribe();
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        if (!this._subscription && !this._disabled) {
            this._subscribe();
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this._unsubscribe();
    }
    /**
     * @private
     * @param {?} ResizeObserver
     * @return {?}
     */
    _createObserver(ResizeObserver) {
        return new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        (observer) => {
            this._resizeObserver = new ResizeObserver((/**
             * @return {?}
             */
            () => observer.next()));
            this._resizeObserver.observe(this.scrollbar.viewport.nativeElement);
            if (this.scrollbar.viewport.contentWrapperElement) {
                this._resizeObserver.observe(this.scrollbar.viewport.contentWrapperElement);
            }
        }));
    }
    /**
     * @private
     * @return {?}
     */
    _subscribe() {
        this._unsubscribe();
        if (this.platform.isBrowser) {
            this.zone.runOutsideAngular((/**
             * @return {?}
             */
            () => {
                this._subscription = this.resizeObserverFactory.resizeObserverLoader.pipe(switchMap((/**
                 * @param {?} moduleObservable
                 * @return {?}
                 */
                (moduleObservable) => moduleObservable)), switchMap((/**
                 * @param {?} ResizeObserver
                 * @return {?}
                 */
                (ResizeObserver) => {
                    if (ResizeObserver) {
                        /** @type {?} */
                        const stream = this._createObserver(ResizeObserver);
                        return this.debounce ? stream.pipe(debounceTime(this._debounce)) : stream;
                    }
                    else {
                        return EMPTY;
                    }
                }))).subscribe((/**
                 * @return {?}
                 */
                () => this.resizeSensor.emit()));
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    _unsubscribe() {
        if (this._resizeObserver) {
            this._resizeObserver.disconnect();
        }
        if (this._subscription) {
            this._subscription.unsubscribe();
        }
    }
}
ResizeSensor.decorators = [
    { type: Directive, args: [{ selector: '[resizeSensor]' },] }
];
/** @nocollapse */
ResizeSensor.ctorParameters = () => [
    { type: NgZone },
    { type: Platform },
    { type: ResizeObserverFactory },
    { type: NgScrollbar }
];
ResizeSensor.propDecorators = {
    debounce: [{ type: Input, args: ['sensorDebounce',] }],
    disabled: [{ type: Input, args: ['sensorDisabled',] }],
    resizeSensor: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._debounce;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._disabled;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._subscription;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype._resizeObserver;
    /** @type {?} */
    ResizeSensor.prototype.resizeSensor;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.zone;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.platform;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.resizeObserverFactory;
    /**
     * @type {?}
     * @private
     */
    ResizeSensor.prototype.scrollbar;
}
//# sourceMappingURL=data:application/json;base64,