/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { InjectionToken } from '@angular/core';
/** @type {?} */
export const NG_SCROLLBAR_OPTIONS = new InjectionToken('NG_SCROLLBAR_OPTIONS');
/**
 * @record
 */
export function NgScrollbarOptions() { }
if (false) {
    /**
     * Sets the scroll axis of the viewport, there are 3 options:
     *
     * - `vertical` Use both vertical and horizontal scrollbar-control
     * - `horizontal` Use both vertical and horizontal scrollbar-control
     * - `all` Use both vertical and horizontal scrollbar-control
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.track;
    /**
     * When to show the scrollbar, and there are 3 options:
     *
     * - `native` (default) Scrollbar will be visible when viewport is scrollable like with native scrollbar-control
     * - `hover` Scrollbars are hidden by default, only visible on scrolling or hovering
     * - `always` Scrollbars are always shown even if the viewport is not scrollable
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.visibility;
    /**
     *  Sets the appearance of the scrollbar, there are 2 options:
     *
     * - `standard` (default) scrollbar space will be reserved just like with native scrollbar-control.
     * - `compact` scrollbar doesn't reserve any space, they are placed over the viewport.
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.appearance;
    /**
     * Sets the position of each scrollbar, there are 4 options:
     *
     * - `native` (Default) Use the default position like in native scrollbar-control.
     * - `invertY` Inverts vertical scrollbar position
     * - `invertX` Inverts Horizontal scrollbar position
     * - `invertAll` Inverts both scrollbar-control positions
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.position;
    /**
     * Sets the pointer events method
     * Use viewport pointer events  to handle dragging and track click (This makes scrolling work when mouse is over the scrollbar)
     * Use scrollbar pointer events to handle dragging and track click
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.pointerEventsMethod;
    /**
     * A class forwarded to scrollable viewport element
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.viewClass;
    /**
     * A class forwarded to the scrollbar track element
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.trackClass;
    /**
     * A class forwarded to the scrollbar thumb element
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.thumbClass;
    /**
     * The minimum scrollbar thumb size in px
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.minThumbSize;
    /**
     * The duration which the scrolling takes to reach its target when scrollbar rail is clicked
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.trackClickScrollDuration;
    /**
     * A flag used to enable/disable the scrollbar pointer events
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.pointerEventsDisabled;
    /**
     * Debounce interval for detecting changes via window.resize event
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.windowResizeDebounce;
    /**
     * Debounce interval for detecting changes via ResizeObserver
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.sensorDebounce;
    /**
     * Whether ResizeObserver is disabled
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.sensorDisabled;
    /**
     * Scroll Audit Time
     * @type {?|undefined}
     */
    NgScrollbarOptions.prototype.scrollAuditTime;
}
/**
 * Set of attributes added on the scrollbar wrapper
 * @record
 */
export function NgScrollbarState() { }
if (false) {
    /** @type {?|undefined} */
    NgScrollbarState.prototype.position;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.track;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.appearance;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.visibility;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.deactivated;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.pointerEventsMethod;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.dir;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.verticalUsed;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.horizontalUsed;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.isVerticallyScrollable;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.isHorizontallyScrollable;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.verticalHovered;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.horizontalHovered;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.verticalDragging;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.horizontalDragging;
    /** @type {?|undefined} */
    NgScrollbarState.prototype.scrollbarClicked;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctc2Nyb2xsYmFyLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbImxpYi9uZy1zY3JvbGxiYXIubW9kZWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBUS9DLE1BQU0sT0FBTyxvQkFBb0IsR0FBRyxJQUFJLGNBQWMsQ0FBcUIsc0JBQXNCLENBQUM7Ozs7QUFFbEcsd0NBMkRDOzs7Ozs7Ozs7O0lBbkRDLG1DQUF1Qjs7Ozs7Ozs7O0lBUXZCLHdDQUFpQzs7Ozs7Ozs7SUFPakMsd0NBQWlDOzs7Ozs7Ozs7O0lBU2pDLHNDQUE2Qjs7Ozs7OztJQU03QixpREFBbUQ7Ozs7O0lBRW5ELHVDQUErQjs7Ozs7SUFFL0Isd0NBQWdDOzs7OztJQUVoQyx3Q0FBZ0M7Ozs7O0lBRWhDLDBDQUFrQzs7Ozs7SUFFbEMsc0RBQThDOzs7OztJQUU5QyxtREFBNEM7Ozs7O0lBRTVDLGtEQUEwQzs7Ozs7SUFFMUMsNENBQW9DOzs7OztJQUVwQyw0Q0FBcUM7Ozs7O0lBRXJDLDZDQUFxQzs7Ozs7O0FBTXZDLHNDQWtCQzs7O0lBakJDLG9DQUE2Qjs7SUFDN0IsaUNBQXVCOztJQUN2QixzQ0FBaUM7O0lBQ2pDLHNDQUFpQzs7SUFDakMsdUNBQXNCOztJQUN0QiwrQ0FBbUQ7O0lBQ25ELCtCQUFvQjs7SUFDcEIsd0NBQXVCOztJQUN2QiwwQ0FBeUI7O0lBQ3pCLGtEQUFpQzs7SUFDakMsb0RBQW1DOztJQUNuQywyQ0FBMEI7O0lBQzFCLDZDQUE0Qjs7SUFDNUIsNENBQTJCOztJQUMzQiw4Q0FBNkI7O0lBRTdCLDRDQUEyQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgdHlwZSBTY3JvbGxiYXJBcHBlYXJhbmNlID0gJ3N0YW5kYXJkJyB8ICdjb21wYWN0JyB8IHVuZGVmaW5lZDtcclxuZXhwb3J0IHR5cGUgU2Nyb2xsYmFyVHJhY2sgPSAndmVydGljYWwnIHwgJ2hvcml6b250YWwnIHwgJ2FsbCcgfCB1bmRlZmluZWQ7XHJcbmV4cG9ydCB0eXBlIFNjcm9sbGJhclZpc2liaWxpdHkgPSAnaG92ZXInIHwgJ2Fsd2F5cycgfCAnbmF0aXZlJyB8IHVuZGVmaW5lZDtcclxuZXhwb3J0IHR5cGUgU2Nyb2xsYmFyUG9zaXRpb24gPSAnbmF0aXZlJyB8ICdpbnZlcnRZJyB8ICdpbnZlcnRYJyB8ICdpbnZlcnRBbGwnIHwgdW5kZWZpbmVkO1xyXG5leHBvcnQgdHlwZSBTY3JvbGxiYXJQb2ludGVyRXZlbnRzTWV0aG9kID0gJ3ZpZXdwb3J0JyB8ICdzY3JvbGxiYXInIHwgdW5kZWZpbmVkO1xyXG5cclxuZXhwb3J0IGNvbnN0IE5HX1NDUk9MTEJBUl9PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPE5nU2Nyb2xsYmFyT3B0aW9ucz4oJ05HX1NDUk9MTEJBUl9PUFRJT05TJyk7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIE5nU2Nyb2xsYmFyT3B0aW9ucyB7XHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgc2Nyb2xsIGF4aXMgb2YgdGhlIHZpZXdwb3J0LCB0aGVyZSBhcmUgMyBvcHRpb25zOlxyXG4gICAqXHJcbiAgICogLSBgdmVydGljYWxgIFVzZSBib3RoIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHNjcm9sbGJhci1jb250cm9sXHJcbiAgICogLSBgaG9yaXpvbnRhbGAgVXNlIGJvdGggdmVydGljYWwgYW5kIGhvcml6b250YWwgc2Nyb2xsYmFyLWNvbnRyb2xcclxuICAgKiAtIGBhbGxgIFVzZSBib3RoIHZlcnRpY2FsIGFuZCBob3Jpem9udGFsIHNjcm9sbGJhci1jb250cm9sXHJcbiAgICovXHJcbiAgdHJhY2s/OiBTY3JvbGxiYXJUcmFjaztcclxuICAvKipcclxuICAgKiBXaGVuIHRvIHNob3cgdGhlIHNjcm9sbGJhciwgYW5kIHRoZXJlIGFyZSAzIG9wdGlvbnM6XHJcbiAgICpcclxuICAgKiAtIGBuYXRpdmVgIChkZWZhdWx0KSBTY3JvbGxiYXIgd2lsbCBiZSB2aXNpYmxlIHdoZW4gdmlld3BvcnQgaXMgc2Nyb2xsYWJsZSBsaWtlIHdpdGggbmF0aXZlIHNjcm9sbGJhci1jb250cm9sXHJcbiAgICogLSBgaG92ZXJgIFNjcm9sbGJhcnMgYXJlIGhpZGRlbiBieSBkZWZhdWx0LCBvbmx5IHZpc2libGUgb24gc2Nyb2xsaW5nIG9yIGhvdmVyaW5nXHJcbiAgICogLSBgYWx3YXlzYCBTY3JvbGxiYXJzIGFyZSBhbHdheXMgc2hvd24gZXZlbiBpZiB0aGUgdmlld3BvcnQgaXMgbm90IHNjcm9sbGFibGVcclxuICAgKi9cclxuICB2aXNpYmlsaXR5PzogU2Nyb2xsYmFyVmlzaWJpbGl0eTtcclxuICAvKipcclxuICAgKiAgU2V0cyB0aGUgYXBwZWFyYW5jZSBvZiB0aGUgc2Nyb2xsYmFyLCB0aGVyZSBhcmUgMiBvcHRpb25zOlxyXG4gICAqXHJcbiAgICogLSBgc3RhbmRhcmRgIChkZWZhdWx0KSBzY3JvbGxiYXIgc3BhY2Ugd2lsbCBiZSByZXNlcnZlZCBqdXN0IGxpa2Ugd2l0aCBuYXRpdmUgc2Nyb2xsYmFyLWNvbnRyb2wuXHJcbiAgICogLSBgY29tcGFjdGAgc2Nyb2xsYmFyIGRvZXNuJ3QgcmVzZXJ2ZSBhbnkgc3BhY2UsIHRoZXkgYXJlIHBsYWNlZCBvdmVyIHRoZSB2aWV3cG9ydC5cclxuICAgKi9cclxuICBhcHBlYXJhbmNlPzogU2Nyb2xsYmFyQXBwZWFyYW5jZTtcclxuICAvKipcclxuICAgKiBTZXRzIHRoZSBwb3NpdGlvbiBvZiBlYWNoIHNjcm9sbGJhciwgdGhlcmUgYXJlIDQgb3B0aW9uczpcclxuICAgKlxyXG4gICAqIC0gYG5hdGl2ZWAgKERlZmF1bHQpIFVzZSB0aGUgZGVmYXVsdCBwb3NpdGlvbiBsaWtlIGluIG5hdGl2ZSBzY3JvbGxiYXItY29udHJvbC5cclxuICAgKiAtIGBpbnZlcnRZYCBJbnZlcnRzIHZlcnRpY2FsIHNjcm9sbGJhciBwb3NpdGlvblxyXG4gICAqIC0gYGludmVydFhgIEludmVydHMgSG9yaXpvbnRhbCBzY3JvbGxiYXIgcG9zaXRpb25cclxuICAgKiAtIGBpbnZlcnRBbGxgIEludmVydHMgYm90aCBzY3JvbGxiYXItY29udHJvbCBwb3NpdGlvbnNcclxuICAgKi9cclxuICBwb3NpdGlvbj86IFNjcm9sbGJhclBvc2l0aW9uO1xyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHBvaW50ZXIgZXZlbnRzIG1ldGhvZFxyXG4gICAqIFVzZSB2aWV3cG9ydCBwb2ludGVyIGV2ZW50cyAgdG8gaGFuZGxlIGRyYWdnaW5nIGFuZCB0cmFjayBjbGljayAoVGhpcyBtYWtlcyBzY3JvbGxpbmcgd29yayB3aGVuIG1vdXNlIGlzIG92ZXIgdGhlIHNjcm9sbGJhcilcclxuICAgKiBVc2Ugc2Nyb2xsYmFyIHBvaW50ZXIgZXZlbnRzIHRvIGhhbmRsZSBkcmFnZ2luZyBhbmQgdHJhY2sgY2xpY2tcclxuICAgKi9cclxuICBwb2ludGVyRXZlbnRzTWV0aG9kPzogU2Nyb2xsYmFyUG9pbnRlckV2ZW50c01ldGhvZDtcclxuICAvKiogQSBjbGFzcyBmb3J3YXJkZWQgdG8gc2Nyb2xsYWJsZSB2aWV3cG9ydCBlbGVtZW50ICovXHJcbiAgdmlld0NsYXNzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gIC8qKiBBIGNsYXNzIGZvcndhcmRlZCB0byB0aGUgc2Nyb2xsYmFyIHRyYWNrIGVsZW1lbnQgKi9cclxuICB0cmFja0NsYXNzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gIC8qKiBBIGNsYXNzIGZvcndhcmRlZCB0byB0aGUgc2Nyb2xsYmFyIHRodW1iIGVsZW1lbnQgKi9cclxuICB0aHVtYkNsYXNzPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xyXG4gIC8qKiBUaGUgbWluaW11bSBzY3JvbGxiYXIgdGh1bWIgc2l6ZSBpbiBweCAqL1xyXG4gIG1pblRodW1iU2l6ZT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAvKiogVGhlIGR1cmF0aW9uIHdoaWNoIHRoZSBzY3JvbGxpbmcgdGFrZXMgdG8gcmVhY2ggaXRzIHRhcmdldCB3aGVuIHNjcm9sbGJhciByYWlsIGlzIGNsaWNrZWQgKi9cclxuICB0cmFja0NsaWNrU2Nyb2xsRHVyYXRpb24/OiBudW1iZXIgfCB1bmRlZmluZWQ7XHJcbiAgLyoqIEEgZmxhZyB1c2VkIHRvIGVuYWJsZS9kaXNhYmxlIHRoZSBzY3JvbGxiYXIgcG9pbnRlciBldmVudHMgKi9cclxuICBwb2ludGVyRXZlbnRzRGlzYWJsZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gIC8qKiBEZWJvdW5jZSBpbnRlcnZhbCBmb3IgZGV0ZWN0aW5nIGNoYW5nZXMgdmlhIHdpbmRvdy5yZXNpemUgZXZlbnQgKi9cclxuICB3aW5kb3dSZXNpemVEZWJvdW5jZT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxuICAvKiogRGVib3VuY2UgaW50ZXJ2YWwgZm9yIGRldGVjdGluZyBjaGFuZ2VzIHZpYSBSZXNpemVPYnNlcnZlciAqL1xyXG4gIHNlbnNvckRlYm91bmNlPzogbnVtYmVyIHwgdW5kZWZpbmVkO1xyXG4gIC8qKiBXaGV0aGVyIFJlc2l6ZU9ic2VydmVyIGlzIGRpc2FibGVkICovXHJcbiAgc2Vuc29yRGlzYWJsZWQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xyXG4gIC8qKiBTY3JvbGwgQXVkaXQgVGltZSAqL1xyXG4gIHNjcm9sbEF1ZGl0VGltZT86IG51bWJlciB8IHVuZGVmaW5lZDtcclxufVxyXG5cclxuLyoqXHJcbiAqIFNldCBvZiBhdHRyaWJ1dGVzIGFkZGVkIG9uIHRoZSBzY3JvbGxiYXIgd3JhcHBlclxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBOZ1Njcm9sbGJhclN0YXRlIHtcclxuICBwb3NpdGlvbj86IFNjcm9sbGJhclBvc2l0aW9uO1xyXG4gIHRyYWNrPzogU2Nyb2xsYmFyVHJhY2s7XHJcbiAgYXBwZWFyYW5jZT86IFNjcm9sbGJhckFwcGVhcmFuY2U7XHJcbiAgdmlzaWJpbGl0eT86IFNjcm9sbGJhclZpc2liaWxpdHk7XHJcbiAgZGVhY3RpdmF0ZWQ/OiBib29sZWFuO1xyXG4gIHBvaW50ZXJFdmVudHNNZXRob2Q/OiBTY3JvbGxiYXJQb2ludGVyRXZlbnRzTWV0aG9kO1xyXG4gIGRpcj86ICdydGwnIHwgJ2x0cic7XHJcbiAgdmVydGljYWxVc2VkPzogYm9vbGVhbjtcclxuICBob3Jpem9udGFsVXNlZD86IGJvb2xlYW47XHJcbiAgaXNWZXJ0aWNhbGx5U2Nyb2xsYWJsZT86IGJvb2xlYW47XHJcbiAgaXNIb3Jpem9udGFsbHlTY3JvbGxhYmxlPzogYm9vbGVhbjtcclxuICB2ZXJ0aWNhbEhvdmVyZWQ/OiBib29sZWFuO1xyXG4gIGhvcml6b250YWxIb3ZlcmVkPzogYm9vbGVhbjtcclxuICB2ZXJ0aWNhbERyYWdnaW5nPzogYm9vbGVhbjtcclxuICBob3Jpem9udGFsRHJhZ2dpbmc/OiBib29sZWFuO1xyXG4gIC8vIEZsYWcgdXNlZCB0byBwcmV2ZW50IHRleHQgc2VsZWN0aW9uIG9uIGNvbnRlbnRcclxuICBzY3JvbGxiYXJDbGlja2VkPzogYm9vbGVhbjtcclxufVxyXG4iXX0=