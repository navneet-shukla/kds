/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output } from '@angular/core';
import { animationFrameScheduler, of, fromEvent, Subject } from 'rxjs';
import { distinctUntilChanged, map, mergeMap, pluck, takeUntil, tap } from 'rxjs/operators';
import { enableSelection, preventSelection, stopPropagation } from '../common';
import { TrackAdapter } from '../track/track';
/**
 * @abstract
 */
export class ThumbAdapter {
    /**
     * @protected
     * @param {?} cmp
     * @param {?} thumbElement
     * @param {?} document
     */
    constructor(cmp, thumbElement, document) {
        this.cmp = cmp;
        this.thumbElement = thumbElement;
        this.document = document;
        // Stream that emits dragging state
        this._dragging = new Subject();
        this.dragging = this._dragging.pipe(distinctUntilChanged());
    }
    /**
     * @return {?}
     */
    get trackMax() {
        return this.track.size - this.size;
    }
    // Get thumb client rect
    /**
     * @return {?}
     */
    get clientRect() {
        return this.thumbElement.getBoundingClientRect();
    }
    // Stream that emits when scrollbar thumb is clicked
    /**
     * @return {?}
     */
    get clicked() {
        return fromEvent(this.thumbElement, 'mousedown', { passive: true }).pipe(stopPropagation());
    }
    // Calculate and update thumb position and size
    /**
     * @return {?}
     */
    update() {
        /** @type {?} */
        const size = calculateThumbSize(this.track.size, this.viewportScrollSize, (/** @type {?} */ (this.cmp.minThumbSize)));
        /** @type {?} */
        const position = calculateThumbPosition(this.viewportScrollOffset, this.viewportScrollMax, this.trackMax);
        animationFrameScheduler.schedule((/**
         * @return {?}
         */
        () => this.updateStyles(this.handleDirection(position, this.trackMax), size)));
    }
    /**
     * Stream that emits the 'scrollTo' position when a scrollbar thumb element is dragged
     * This function is called by thumb drag event using viewport or scrollbar pointer events
     * @param {?} event
     * @return {?}
     */
    dragged(event) {
        /** @type {?} */
        let trackMaxStart;
        /** @type {?} */
        let scrollMaxStart;
        /** @type {?} */
        const dragStart = of(event).pipe(preventSelection(this.document), tap((/**
         * @return {?}
         */
        () => {
            // Capture scrollMax and trackMax once
            trackMaxStart = this.trackMax;
            scrollMaxStart = this.viewportScrollMax;
            this.setDragging(true);
        })));
        /** @type {?} */
        const dragging = fromEvent(this.document, 'mousemove', { capture: true, passive: true }).pipe(stopPropagation());
        /** @type {?} */
        const dragEnd = fromEvent(this.document, 'mouseup', { capture: true }).pipe(stopPropagation(), enableSelection(this.document), tap((/**
         * @return {?}
         */
        () => this.setDragging(false))));
        return dragStart.pipe(pluck(this.pageProperty), map((/**
         * @param {?} pageOffset
         * @return {?}
         */
        (pageOffset) => pageOffset - this.dragStartOffset)), mergeMap((/**
         * @param {?} mouseDownOffset
         * @return {?}
         */
        (mouseDownOffset) => dragging.pipe(pluck(this.clientProperty), 
        // Calculate how far the pointer is from the top/left of the scrollbar (minus the dragOffset).
        map((/**
         * @param {?} mouseOffset
         * @return {?}
         */
        (mouseOffset) => mouseOffset - this.track.offset)), map((/**
         * @param {?} offset
         * @return {?}
         */
        (offset) => scrollMaxStart * (offset - mouseDownOffset) / trackMaxStart)), map((/**
         * @param {?} position
         * @return {?}
         */
        (position) => this.handleDrag(position, scrollMaxStart))), tap((/**
         * @param {?} position
         * @return {?}
         */
        (position) => this.scrollTo(position))), takeUntil(dragEnd)))));
    }
}
ThumbAdapter.propDecorators = {
    track: [{ type: Input }],
    dragging: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    ThumbAdapter.prototype.track;
    /**
     * @type {?}
     * @private
     */
    ThumbAdapter.prototype._dragging;
    /** @type {?} */
    ThumbAdapter.prototype.dragging;
    /**
     * @type {?}
     * @protected
     */
    ThumbAdapter.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    ThumbAdapter.prototype.thumbElement;
    /**
     * @type {?}
     * @protected
     */
    ThumbAdapter.prototype.document;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThumbAdapter.prototype.pageProperty = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThumbAdapter.prototype.clientProperty = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ThumbAdapter.prototype.dragStartOffset = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ThumbAdapter.prototype.size = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThumbAdapter.prototype.viewportScrollSize = function () { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    ThumbAdapter.prototype.viewportScrollOffset = function () { };
    /**
     * @abstract
     * @return {?}
     */
    ThumbAdapter.prototype.viewportScrollMax = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    ThumbAdapter.prototype.setDragging = function (value) { };
    /**
     * @abstract
     * @protected
     * @param {?} position
     * @return {?}
     */
    ThumbAdapter.prototype.scrollTo = function (position) { };
    /**
     * @abstract
     * @protected
     * @param {?} position
     * @param {?} size
     * @return {?}
     */
    ThumbAdapter.prototype.updateStyles = function (position, size) { };
    /**
     * @abstract
     * @protected
     * @param {?} position
     * @param {?=} scrollMax
     * @return {?}
     */
    ThumbAdapter.prototype.handleDrag = function (position, scrollMax) { };
    /**
     * @abstract
     * @protected
     * @param {?} position
     * @param {?=} scrollMax
     * @return {?}
     */
    ThumbAdapter.prototype.handleDirection = function (position, scrollMax) { };
}
/**
 * Calculate scrollbar thumb size
 * @param {?} trackSize
 * @param {?} contentSize
 * @param {?} minThumbSize
 * @return {?}
 */
function calculateThumbSize(trackSize, contentSize, minThumbSize) {
    /** @type {?} */
    const scrollbarRatio = trackSize / contentSize;
    /** @type {?} */
    const thumbSize = scrollbarRatio * trackSize;
    return Math.max(~~thumbSize, minThumbSize);
}
/**
 * Calculate scrollbar thumb position
 * @param {?} scrollPosition
 * @param {?} scrollMax
 * @param {?} trackMax
 * @return {?}
 */
function calculateThumbPosition(scrollPosition, scrollMax, trackMax) {
    return scrollPosition * trackMax / scrollMax;
}
//# sourceMappingURL=data:application/json;base64,