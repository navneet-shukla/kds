/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Inject, ElementRef } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { RtlScrollAxisType } from '@angular/cdk/platform';
import { Directionality } from '@angular/cdk/bidi';
import { NgScrollbar } from '../../ng-scrollbar';
import { ThumbAdapter } from './thumb';
export class ThumbXDirective extends ThumbAdapter {
    /**
     * @param {?} cmp
     * @param {?} element
     * @param {?} document
     * @param {?} dir
     */
    constructor(cmp, element, document, dir) {
        super(cmp, element.nativeElement, document);
        this.cmp = cmp;
        this.element = element;
        this.document = document;
        this.dir = dir;
    }
    /**
     * @protected
     * @return {?}
     */
    get clientProperty() {
        return 'clientX';
    }
    /**
     * @protected
     * @return {?}
     */
    get pageProperty() {
        return 'pageX';
    }
    /**
     * @protected
     * @return {?}
     */
    get viewportScrollSize() {
        return this.cmp.viewport.scrollWidth;
    }
    /**
     * @protected
     * @return {?}
     */
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollLeft;
    }
    /**
     * @return {?}
     */
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxX;
    }
    /**
     * @return {?}
     */
    get dragStartOffset() {
        return this.clientRect.left;
    }
    /**
     * @return {?}
     */
    get size() {
        return this.thumbElement.clientWidth;
    }
    /**
     * @protected
     * @param {?} position
     * @param {?} size
     * @return {?}
     */
    updateStyles(position, size) {
        this.thumbElement.style.width = `${size}px`;
        this.thumbElement.style.transform = `translate3d(${position}px, 0, 0)`;
    }
    /**
     * @protected
     * @param {?} position
     * @param {?} scrollMax
     * @return {?}
     */
    handleDrag(position, scrollMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
                return position - scrollMax;
            }
            if (this.cmp.manager.rtlScrollAxisType === RtlScrollAxisType.INVERTED) {
                return scrollMax - position;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NORMAL) {
            //   return position;
            // }
        }
        return position;
    }
    /**
     * @protected
     * @param {?} position
     * @param {?} trackMax
     * @return {?}
     */
    handleDirection(position, trackMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === RtlScrollAxisType.INVERTED) {
                return -position;
            }
            if (this.cmp.manager.rtlScrollAxisType === RtlScrollAxisType.NORMAL) {
                return position - trackMax;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
            //   return position;
            // }
        }
        return position;
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    setDragging(value) {
        this.cmp.setDragging({ horizontalDragging: value });
    }
    /**
     * @protected
     * @param {?} position
     * @return {?}
     */
    scrollTo(position) {
        this.cmp.viewport.scrollXTo(position);
    }
}
ThumbXDirective.decorators = [
    { type: Directive, args: [{ selector: '[scrollbarThumbX]' },] }
];
/** @nocollapse */
ThumbXDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: Directionality }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ThumbXDirective.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    ThumbXDirective.prototype.element;
    /**
     * @type {?}
     * @protected
     */
    ThumbXDirective.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    ThumbXDirective.prototype.dir;
}
export class ThumbYDirective extends ThumbAdapter {
    /**
     * @param {?} cmp
     * @param {?} element
     * @param {?} document
     */
    constructor(cmp, element, document) {
        super(cmp, element.nativeElement, document);
        this.cmp = cmp;
        this.element = element;
        this.document = document;
    }
    /**
     * @protected
     * @return {?}
     */
    get pageProperty() {
        return 'pageY';
    }
    /**
     * @protected
     * @return {?}
     */
    get viewportScrollSize() {
        return this.cmp.viewport.scrollHeight;
    }
    /**
     * @protected
     * @return {?}
     */
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollTop;
    }
    /**
     * @return {?}
     */
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxY;
    }
    /**
     * @protected
     * @return {?}
     */
    get clientProperty() {
        return 'clientY';
    }
    /**
     * @return {?}
     */
    get dragStartOffset() {
        return this.clientRect.top;
    }
    /**
     * @return {?}
     */
    get size() {
        return this.thumbElement.clientHeight;
    }
    /**
     * @protected
     * @param {?} position
     * @param {?} size
     * @return {?}
     */
    updateStyles(position, size) {
        this.thumbElement.style.height = `${size}px`;
        this.thumbElement.style.transform = `translate3d(0px, ${position}px, 0)`;
    }
    /**
     * @protected
     * @param {?} position
     * @return {?}
     */
    handleDrag(position) {
        return position;
    }
    /**
     * @protected
     * @param {?} position
     * @return {?}
     */
    handleDirection(position) {
        return position;
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    setDragging(value) {
        this.cmp.setDragging({ verticalDragging: value });
    }
    /**
     * @protected
     * @param {?} position
     * @return {?}
     */
    scrollTo(position) {
        this.cmp.viewport.scrollYTo(position);
    }
}
ThumbYDirective.decorators = [
    { type: Directive, args: [{ selector: '[scrollbarThumbY]' },] }
];
/** @nocollapse */
ThumbYDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    ThumbYDirective.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    ThumbYDirective.prototype.element;
    /**
     * @type {?}
     * @protected
     */
    ThumbYDirective.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,