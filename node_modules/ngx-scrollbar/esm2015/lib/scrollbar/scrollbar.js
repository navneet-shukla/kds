/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { asyncScheduler, EMPTY, merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { isWithinBounds } from './common';
/**
 * @abstract
 */
export class Scrollbar {
    /**
     * @protected
     * @param {?} cmp
     * @param {?} platform
     * @param {?} document
     * @param {?} zone
     */
    constructor(cmp, platform, document, zone) {
        this.cmp = cmp;
        this.platform = platform;
        this.document = document;
        this.zone = zone;
        // Stream that emits to unsubscribe from all streams
        this.destroyed = new Subject();
    }
    /**
     * Activate scrollbar pointer events
     * @private
     * @return {?}
     */
    activatePointerEvents() {
        // Stream that emits when scrollbar thumb is dragged
        /** @type {?} */
        let thumbDragEvent = EMPTY;
        // Stream that emits when scrollbar track is clicked
        /** @type {?} */
        let trackClickEvent = EMPTY;
        // Stream that emits when scrollbar track is hovered
        /** @type {?} */
        let trackHoveredEvent = EMPTY;
        // Set the method used for the pointer events option
        if (this.cmp.pointerEventsMethod === 'viewport') {
            // Pointer events using the viewport
            this.viewportTrackClicked = new Subject();
            this.viewportThumbClicked = new Subject();
            // Activate the pointer events of the viewport directive
            this.cmp.viewport.activatePointerEvents(this.destroyed);
            // Set streams
            thumbDragEvent = this.viewportThumbClicked;
            trackClickEvent = this.viewportTrackClicked;
            trackHoveredEvent = this.cmp.viewport.hovered.pipe(
            // Check if track is hovered
            map((/**
             * @param {?} e
             * @return {?}
             */
            (e) => isWithinBounds(e, this.track.clientRect))), distinctUntilChanged(), 
            // Enable / disable text selection
            tap((/**
             * @param {?} hovered
             * @return {?}
             */
            (hovered) => this.document.onselectstart = hovered ? (/**
             * @return {?}
             */
            () => false) : null)));
            this.cmp.viewport.clicked.pipe(tap((/**
             * @param {?} e
             * @return {?}
             */
            (e) => {
                if (e) {
                    if (isWithinBounds(e, this.thumb.clientRect)) {
                        this.viewportThumbClicked.next(e);
                    }
                    else if (isWithinBounds(e, this.track.clientRect)) {
                        this.cmp.setClicked(true);
                        this.viewportTrackClicked.next(e);
                    }
                }
                else {
                    this.cmp.setClicked(false);
                }
            })), takeUntil(this.destroyed)).subscribe();
        }
        else {
            // Pointer events method is using 'scrollbar'
            thumbDragEvent = this.thumb.clicked;
            trackClickEvent = this.track.clicked;
            trackHoveredEvent = this.track.hovered;
        }
        return merge(
        // Activate scrollbar hovered event
        trackHoveredEvent.pipe(tap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => this.setHovered(e)))), 
        // Activate scrollbar thumb drag event
        thumbDragEvent.pipe(switchMap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => this.thumb.dragged(e)))), 
        // Activate scrollbar track click event
        trackClickEvent.pipe(switchMap((/**
         * @param {?} e
         * @return {?}
         */
        (e) => this.track.onTrackClicked(e, this.thumb.size, this.viewportScrollSize)))));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.zone.runOutsideAngular((/**
         * @return {?}
         */
        () => {
            // Activate pointer events on Desktop only
            if (!(this.platform.IOS || this.platform.ANDROID) && !this.cmp.pointerEventsDisabled) {
                this.activatePointerEvents().pipe(takeUntil(this.destroyed)).subscribe();
            }
            // Stream that emits when host component is updated
            /** @type {?} */
            const updated = this.cmp.updated.pipe(tap((/**
             * @return {?}
             */
            () => this.onUpdated())));
            // Update scrollbar thumb when viewport is scrolled and when scrollbar component is updated
            merge(this.cmp.scrolled, updated).pipe(tap((/**
             * @return {?}
             */
            () => this.thumb.update())), takeUntil(this.destroyed)).subscribe();
            // Initialize scrollbar
            asyncScheduler.schedule((/**
             * @return {?}
             */
            () => this.thumb.update()), 100);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
        // Clean up viewport streams if used
        if (this.viewportThumbClicked && this.viewportTrackClicked) {
            this.viewportTrackClicked.complete();
            this.viewportThumbClicked.complete();
        }
    }
}
if (false) {
    /** @type {?} */
    Scrollbar.prototype.thumb;
    /** @type {?} */
    Scrollbar.prototype.track;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.destroyed;
    /**
     * Viewport pointer events
     * The following streams are only activated when (pointerEventsMethod === 'viewport')
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.viewportTrackClicked;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.viewportThumbClicked;
    /** @type {?} */
    Scrollbar.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.platform;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.document;
    /**
     * @type {?}
     * @protected
     */
    Scrollbar.prototype.zone;
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    Scrollbar.prototype.viewportScrollSize = function () { };
    /**
     * @abstract
     * @protected
     * @param {?} value
     * @return {?}
     */
    Scrollbar.prototype.setHovered = function (value) { };
    /**
     * @abstract
     * @protected
     * @return {?}
     */
    Scrollbar.prototype.onUpdated = function () { };
}
//# sourceMappingURL=data:application/json;base64,