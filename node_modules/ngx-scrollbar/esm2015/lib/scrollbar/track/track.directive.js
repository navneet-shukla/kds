/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { TrackAdapter } from './track';
import { NgScrollbar } from '../../ng-scrollbar';
export class TrackXDirective extends TrackAdapter {
    /**
     * @param {?} cmp
     * @param {?} trackElement
     * @param {?} document
     */
    constructor(cmp, trackElement, document) {
        super(cmp, trackElement.nativeElement, document);
        this.cmp = cmp;
        this.document = document;
    }
    /**
     * @return {?}
     */
    get pageProperty() {
        return 'pageX';
    }
    /**
     * @return {?}
     */
    get offset() {
        return this.clientRect.left;
    }
    /**
     * @return {?}
     */
    get size() {
        return this.trackElement.clientWidth;
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    mapToScrollToOption(value) {
        return { left: value };
    }
}
TrackXDirective.decorators = [
    { type: Directive, args: [{ selector: '[scrollbarTrackX]' },] }
];
/** @nocollapse */
TrackXDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    TrackXDirective.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    TrackXDirective.prototype.document;
}
export class TrackYDirective extends TrackAdapter {
    /**
     * @param {?} cmp
     * @param {?} trackElement
     * @param {?} document
     */
    constructor(cmp, trackElement, document) {
        super(cmp, trackElement.nativeElement, document);
        this.cmp = cmp;
        this.document = document;
    }
    /**
     * @return {?}
     */
    get pageProperty() {
        return 'pageY';
    }
    /**
     * @return {?}
     */
    get offset() {
        return this.clientRect.top;
    }
    /**
     * @return {?}
     */
    get size() {
        return this.trackElement.clientHeight;
    }
    /**
     * @protected
     * @param {?} value
     * @return {?}
     */
    mapToScrollToOption(value) {
        return { top: value };
    }
}
TrackYDirective.decorators = [
    { type: Directive, args: [{ selector: '[scrollbarTrackY]' },] }
];
/** @nocollapse */
TrackYDirective.ctorParameters = () => [
    { type: NgScrollbar },
    { type: ElementRef },
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    TrackYDirective.prototype.cmp;
    /**
     * @type {?}
     * @protected
     */
    TrackYDirective.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXNjcm9sbGJhci8iLCJzb3VyY2VzIjpbImxpYi9zY3JvbGxiYXIvdHJhY2svdHJhY2suZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR2pELE1BQU0sT0FBTyxlQUFnQixTQUFRLFlBQVk7Ozs7OztJQWMvQyxZQUFzQixHQUFnQixFQUFFLFlBQXdCLEVBQThCLFFBQWE7UUFDekcsS0FBSyxDQUFDLEdBQUcsRUFBRSxZQUFZLENBQUMsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBRDdCLFFBQUcsR0FBSCxHQUFHLENBQWE7UUFBd0QsYUFBUSxHQUFSLFFBQVEsQ0FBSztJQUUzRyxDQUFDOzs7O0lBZEQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxPQUFPLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELElBQUksTUFBTTtRQUNSLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQzs7OztJQUVELElBQUksSUFBSTtRQUNOLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQzs7Ozs7O0lBTVMsbUJBQW1CLENBQUMsS0FBYTtRQUN6QyxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxDQUFDO0lBQ3pCLENBQUM7OztZQXJCRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsbUJBQW1CLEVBQUU7Ozs7WUFGbkMsV0FBVztZQUhBLFVBQVU7NENBb0J1QyxNQUFNLFNBQUMsUUFBUTs7Ozs7OztJQUF0RSw4QkFBMEI7Ozs7O0lBQTRCLG1DQUF5Qzs7QUFVN0csTUFBTSxPQUFPLGVBQWdCLFNBQVEsWUFBWTs7Ozs7O0lBYy9DLFlBQXNCLEdBQWdCLEVBQUUsWUFBd0IsRUFBOEIsUUFBYTtRQUN6RyxLQUFLLENBQUMsR0FBRyxFQUFFLFlBQVksQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFEN0IsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUF3RCxhQUFRLEdBQVIsUUFBUSxDQUFLO0lBRTNHLENBQUM7Ozs7SUFkRCxJQUFJLFlBQVk7UUFDZCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDOzs7O0lBRUQsSUFBSSxNQUFNO1FBQ1IsT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQztJQUM3QixDQUFDOzs7O0lBRUQsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLFlBQVksQ0FBQztJQUN4QyxDQUFDOzs7Ozs7SUFNUyxtQkFBbUIsQ0FBQyxLQUFhO1FBQ3pDLE9BQU8sRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7O1lBckJGLFNBQVMsU0FBQyxFQUFFLFFBQVEsRUFBRSxtQkFBbUIsRUFBRTs7OztZQTFCbkMsV0FBVztZQUhBLFVBQVU7NENBNEN1QyxNQUFNLFNBQUMsUUFBUTs7Ozs7OztJQUF0RSw4QkFBMEI7Ozs7O0lBQTRCLG1DQUF5QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUcmFja0FkYXB0ZXIgfSBmcm9tICcuL3RyYWNrJztcbmltcG9ydCB7IE5nU2Nyb2xsYmFyIH0gZnJvbSAnLi4vLi4vbmctc2Nyb2xsYmFyJztcblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3Njcm9sbGJhclRyYWNrWF0nIH0pXG5leHBvcnQgY2xhc3MgVHJhY2tYRGlyZWN0aXZlIGV4dGVuZHMgVHJhY2tBZGFwdGVyIHtcblxuICBnZXQgcGFnZVByb3BlcnR5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdwYWdlWCc7XG4gIH1cblxuICBnZXQgb2Zmc2V0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50UmVjdC5sZWZ0O1xuICB9XG5cbiAgZ2V0IHNpemUoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy50cmFja0VsZW1lbnQuY2xpZW50V2lkdGg7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY21wOiBOZ1Njcm9sbGJhciwgdHJhY2tFbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KERPQ1VNRU5UKSBwcm90ZWN0ZWQgZG9jdW1lbnQ6IGFueSkge1xuICAgIHN1cGVyKGNtcCwgdHJhY2tFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIGRvY3VtZW50KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXBUb1Njcm9sbFRvT3B0aW9uKHZhbHVlOiBudW1iZXIpOiBTY3JvbGxUb09wdGlvbnMge1xuICAgIHJldHVybiB7IGxlZnQ6IHZhbHVlIH07XG4gIH1cbn1cblxuQERpcmVjdGl2ZSh7IHNlbGVjdG9yOiAnW3Njcm9sbGJhclRyYWNrWV0nIH0pXG5leHBvcnQgY2xhc3MgVHJhY2tZRGlyZWN0aXZlIGV4dGVuZHMgVHJhY2tBZGFwdGVyIHtcblxuICBnZXQgcGFnZVByb3BlcnR5KCk6IHN0cmluZyB7XG4gICAgcmV0dXJuICdwYWdlWSc7XG4gIH1cblxuICBnZXQgb2Zmc2V0KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY2xpZW50UmVjdC50b3A7XG4gIH1cblxuICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnRyYWNrRWxlbWVudC5jbGllbnRIZWlnaHQ7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY21wOiBOZ1Njcm9sbGJhciwgdHJhY2tFbGVtZW50OiBFbGVtZW50UmVmLCBASW5qZWN0KERPQ1VNRU5UKSBwcm90ZWN0ZWQgZG9jdW1lbnQ6IGFueSkge1xuICAgIHN1cGVyKGNtcCwgdHJhY2tFbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIGRvY3VtZW50KTtcbiAgfVxuXG4gIHByb3RlY3RlZCBtYXBUb1Njcm9sbFRvT3B0aW9uKHZhbHVlOiBudW1iZXIpOiBTY3JvbGxUb09wdGlvbnMge1xuICAgIHJldHVybiB7IHRvcDogdmFsdWUgfTtcbiAgfVxufVxuIl19